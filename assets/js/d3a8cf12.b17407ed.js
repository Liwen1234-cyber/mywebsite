"use strict";(self.webpackChunkmybase=self.webpackChunkmybase||[]).push([[52313],{35301:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>d,default:()=>x,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u94fe\u8868","title":"\u94fe\u8868","description":"203.\u79fb\u9664\u94fe\u8868\u5143\u7d20","source":"@site/docs/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u94fe\u8868.md","sourceDirName":"\u7801\u519c/\u5237\u9898\u8bb0\u5f55","slug":"/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u94fe\u8868","permalink":"/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u94fe\u8868","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var i=r(74848),l=r(28453);const t={},d="\u94fe\u8868",a={},c=[{value:"203.\u79fb\u9664\u94fe\u8868\u5143\u7d20",id:"203\u79fb\u9664\u94fe\u8868\u5143\u7d20",level:2},{value:"707.\u8bbe\u8ba1\u94fe\u8868",id:"707\u8bbe\u8ba1\u94fe\u8868",level:2},{value:"206.\u53cd\u8f6c\u94fe\u8868",id:"206\u53cd\u8f6c\u94fe\u8868",level:2},{value:"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",id:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",level:2},{value:"19.\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u8282\u70b9",id:"19\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c-n-\u4e2a\u8282\u70b9",level:2},{value:"\u9762\u8bd5\u9898 02.07. \u94fe\u8868\u76f8\u4ea4",id:"\u9762\u8bd5\u9898-0207-\u94fe\u8868\u76f8\u4ea4",level:2},{value:"142.\u73af\u5f62\u94fe\u8868 II",id:"142\u73af\u5f62\u94fe\u8868-ii",level:2},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2},{value:"\u5176\u4ed6",id:"\u5176\u4ed6",level:2},{value:"234. \u56de\u6587\u94fe\u8868",id:"234-\u56de\u6587\u94fe\u8868",level:3},{value:"143. \u91cd\u6392\u94fe\u8868",id:"143-\u91cd\u6392\u94fe\u8868",level:3},{value:"141. \u73af\u5f62\u94fe\u8868",id:"141-\u73af\u5f62\u94fe\u8868",level:3},{value:"160. \u76f8\u4ea4\u94fe\u8868",id:"160-\u76f8\u4ea4\u94fe\u8868",level:3},{value:"2. \u4e24\u6570\u76f8\u52a0",id:"2-\u4e24\u6570\u76f8\u52a0",level:3},{value:"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",id:"25-k-\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",level:3},{value:"138. \u968f\u673a\u94fe\u8868\u7684\u590d\u5236",id:"138-\u968f\u673a\u94fe\u8868\u7684\u590d\u5236",level:3},{value:"148. \u6392\u5e8f\u94fe\u8868",id:"148-\u6392\u5e8f\u94fe\u8868",level:3},{value:"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868",id:"23-\u5408\u5e76-k-\u4e2a\u5347\u5e8f\u94fe\u8868",level:3},{value:"\u65b9\u6cd5\u4e00:\u5206\u6cbb",id:"\u65b9\u6cd5\u4e00\u5206\u6cbb",level:4},{value:"\u65b9\u6cd5\u4e8c:\u6700\u5c0f\u5806",id:"\u65b9\u6cd5\u4e8c\u6700\u5c0f\u5806",level:4},{value:"146. LRU \u7f13\u5b58",id:"146-lru-\u7f13\u5b58",level:3}];function o(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,l.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"\u94fe\u8868",children:"\u94fe\u8868"})}),"\n",(0,i.jsx)(e.h2,{id:"203\u79fb\u9664\u94fe\u8868\u5143\u7d20",children:"203.\u79fb\u9664\u94fe\u8868\u5143\u7d20"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/remove-linked-list-elements/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,i.jsx)(e.p,{children:"\u9898\u610f\uff1a\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c val \u7684\u6240\u6709\u8282\u70b9\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [1,2,6,3,4,5,6], val = 6 \u8f93\u51fa\uff1a[1,2,3,4,5]"}),"\n",(0,i.jsx)(e.p,{children:"\u793a\u4f8b 2\uff1a \u8f93\u5165\uff1ahead = [], val = 1 \u8f93\u51fa\uff1a[]"}),"\n",(0,i.jsx)(e.p,{children:"\u793a\u4f8b 3\uff1a \u8f93\u5165\uff1ahead = [7,7,7,7], val = 7 \u8f93\u51fa\uff1a[]"}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\n//\u7528\u539f\u6765\u7684\u94fe\u8868\u64cd\u4f5c\uff1a\r\nclass Solution {\r\n    public ListNode removeElements(ListNode head, int val) {\r\n        while(head != null && head.val == val){\r\n            head = head.next;\r\n        }\r\n        ListNode node = head;\r\n        while(node != null && node.next != null){\r\n            if(node.next.val == val){\r\n                node.next = node.next.next;\r\n            } else{\r\n                node = node.next;\r\n            }\r\n        }\r\n        return head;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"//\u8bbe\u7f6e\u4e00\u4e2a\u865a\u62df\u5934\u7ed3\u70b9\uff1a\r\nclass Solution {\r\n    public ListNode removeElements(ListNode head, int val) {\r\n        ListNode dummy = new ListNode();\r\n        dummy.next = head; //\u865a\u62df\u5934\u7ed3\u70b9\r\n        ListNode node = dummy;\r\n        while(node.next != null){\r\n            if(node.next.val == val){\r\n                node.next = node.next.next;\r\n            } else{\r\n                node = node.next;\r\n            }\r\n        }\r\n        return dummy.next;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"707\u8bbe\u8ba1\u94fe\u8868",children:"707.\u8bbe\u8ba1\u94fe\u8868"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/design-linked-list/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"\u9898\u610f\uff1a"})}),"\n",(0,i.jsx)(e.p,{children:"\u5728\u94fe\u8868\u7c7b\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff1a"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"get(index)\uff1a\u83b7\u53d6\u94fe\u8868\u4e2d\u7b2c index \u4e2a\u8282\u70b9\u7684\u503c\u3002\u5982\u679c\u7d22\u5f15\u65e0\u6548\uff0c\u5219\u8fd4\u56de-1\u3002"}),"\n",(0,i.jsx)(e.li,{children:"addAtHead(val)\uff1a\u5728\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u6dfb\u52a0\u4e00\u4e2a\u503c\u4e3a val \u7684\u8282\u70b9\u3002\u63d2\u5165\u540e\uff0c\u65b0\u8282\u70b9\u5c06\u6210\u4e3a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002"}),"\n",(0,i.jsx)(e.li,{children:"addAtTail(val)\uff1a\u5c06\u503c\u4e3a val \u7684\u8282\u70b9\u8ffd\u52a0\u5230\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002"}),"\n",(0,i.jsx)(e.li,{children:"addAtIndex(index,val)\uff1a\u5728\u94fe\u8868\u4e2d\u7684\u7b2c index \u4e2a\u8282\u70b9\u4e4b\u524d\u6dfb\u52a0\u503c\u4e3a val \u7684\u8282\u70b9\u3002\u5982\u679c index \u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5219\u8be5\u8282\u70b9\u5c06\u9644\u52a0\u5230\u94fe\u8868\u7684\u672b\u5c3e\u3002\u5982\u679c index \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u5219\u4e0d\u4f1a\u63d2\u5165\u8282\u70b9\u3002\u5982\u679c index \u5c0f\u4e8e 0\uff0c\u5219\u5728\u5934\u90e8\u63d2\u5165\u8282\u70b9\u3002"}),"\n",(0,i.jsx)(e.li,{children:"deleteAtIndex(index)\uff1a\u5982\u679c\u7d22\u5f15 index \u6709\u6548\uff0c\u5219\u5220\u9664\u94fe\u8868\u4e2d\u7684\u7b2c index \u4e2a\u8282\u70b9\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"\u793a\u4f8b\uff1a"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'\u8f93\u5165\r\n["MyLinkedList", "addAtHead", "addAtTail", "addAtIndex", "get", "deleteAtIndex", "get"]\r\n[[], [1], [3], [1, 2], [1], [1], [1]]\r\n\u8f93\u51fa\r\n[null, null, null, null, 2, null, 3]\r\n\r\n\u89e3\u91ca\r\nMyLinkedList myLinkedList = new MyLinkedList();\r\nmyLinkedList.addAtHead(1);\r\nmyLinkedList.addAtTail(3);\r\nmyLinkedList.addAtIndex(1, 2);    // \u94fe\u8868\u53d8\u4e3a 1->2->3\r\nmyLinkedList.get(1);              // \u8fd4\u56de 2\r\nmyLinkedList.deleteAtIndex(1);    // \u73b0\u5728\uff0c\u94fe\u8868\u53d8\u4e3a 1->3\r\nmyLinkedList.get(1);              // \u8fd4\u56de 3\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"\u63d0\u793a\uff1a"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:"0 <= index, val <= 1000"})}),"\n",(0,i.jsx)(e.li,{children:"\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684 LinkedList \u5e93\u3002"}),"\n",(0,i.jsxs)(e.li,{children:["\u8c03\u7528 ",(0,i.jsx)(e.code,{children:"get"}),"\u3001",(0,i.jsx)(e.code,{children:"addAtHead"}),"\u3001",(0,i.jsx)(e.code,{children:"addAtTail"}),"\u3001",(0,i.jsx)(e.code,{children:"addAtIndex"})," \u548c ",(0,i.jsx)(e.code,{children:"deleteAtIndex"})," \u7684\u6b21\u6570\u4e0d\u8d85\u8fc7 ",(0,i.jsx)(e.code,{children:"2000"})," \u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"//\u5355\u94fe\u8868\r\nclass ListNode{\r\n    int val;\r\n    ListNode next;\r\n    ListNode(){}\r\n    ListNode(int val){\r\n        this.val = val;\r\n    }\r\n    ListNode(int val,ListNode next){\r\n        this.val = val;\r\n        this.next = next;\r\n    }\r\n}\r\nclass MyLinkedList {\r\n    int size;\r\n    ListNode head;\r\n    public MyLinkedList() {\r\n        size = 0;\r\n        head = new ListNode(0);\r\n    }\r\n\r\n    public int get(int index) {\r\n        if(index < 0 || index > size-1){\r\n            return -1;\r\n        }\r\n        ListNode cur = head;\r\n        while(index > 0){\r\n            cur = cur.next;\r\n            index--;\r\n        }\r\n        return cur.val;\r\n    }\r\n\r\n    public void addAtHead(int val) {\r\n        if(size == 0){\r\n            head.val = val;\r\n            size++;\r\n            return;\r\n        }\r\n        ListNode dummy = new ListNode(val);\r\n        dummy.next =head;\r\n        head = dummy;\r\n        size++;\r\n    }\r\n\r\n    public void addAtTail(int val) {\r\n        if(size == 0){\r\n            addAtHead(val);\r\n            return;\r\n        }\r\n        ListNode cur = head;\r\n        while(cur.next != null){\r\n            cur = cur.next;\r\n        }\r\n        cur.next = new ListNode(val);\r\n        size++;\r\n    }\r\n\r\n    public void addAtIndex(int index, int val) {\r\n        ListNode dummy = new ListNode(0);\r\n        dummy.next =head;\r\n        ListNode cur = dummy;\r\n        if(index == size){\r\n            addAtTail(val);\r\n        } else if(index > size){\r\n        } else{\r\n            while(index > 0){\r\n                cur = cur.next;\r\n                index--;\r\n            }\r\n            ListNode temp = new ListNode(val);\r\n            temp.next = cur.next;\r\n            cur.next = temp;\r\n            size++;\r\n        }\r\n        head = dummy.next;\r\n\r\n    }\r\n\r\n    public void deleteAtIndex(int index) {\r\n        if(index < 0 || index > size-1){\r\n            return;\r\n        }\r\n        ListNode dummy = new ListNode(0);\r\n        dummy.next = head;\r\n        ListNode cur = dummy;\r\n\r\n        while(index > 0){\r\n            cur = cur.next;\r\n            index--;\r\n        }\r\n        cur.next = cur.next.next;\r\n        head = dummy.next;\r\n        size--;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"//\u53cc\u94fe\u8868\r\nclass ListNode{\r\n    int val;\r\n    ListNode next,prev;\r\n    ListNode(){}\r\n    ListNode(int val){\r\n        this.val = val;\r\n    }\r\n    ListNode(int val,ListNode prev,ListNode next){\r\n        this.val = val;\r\n        this.next = next;\r\n        this.prev = prev;\r\n    }\r\n}\r\nclass MyLinkedList {\r\n    int size;\r\n    ListNode head,tail;\r\n\r\n    public MyLinkedList() {\r\n        size = 0;\r\n        head = new ListNode(0);\r\n        tail = new ListNode(0);\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n\r\n    public int get(int index) {\r\n        if(index < 0 || index > size-1){\r\n            return -1;\r\n        }\r\n        ListNode cur = this.head;\r\n        if(index < size/2){\r\n\r\n            for(int i = 0;i <= index;i++){\r\n                cur = cur.next;\r\n            }\r\n        }else{\r\n            cur = this.tail;\r\n            for(int i = size;i > index;i--){\r\n                cur = cur.prev;\r\n            }\r\n\r\n        }\r\n        return cur.val;\r\n    }\r\n\r\n    public void addAtHead(int val) {\r\n        addAtIndex(0,val);\r\n    }\r\n\r\n    public void addAtTail(int val) {\r\n        addAtIndex(size,val);\r\n    }\r\n\r\n    public void addAtIndex(int index, int val) {\r\n        if(index < 0 || index > size){\r\n            return;\r\n        }\r\n        ListNode cur = this.head;\r\n        for(int i = 0;i < index;i++){\r\n            cur = cur.next;\r\n        }\r\n        ListNode temp = new ListNode(val);\r\n        cur.next.prev = temp;\r\n        temp.prev = cur;\r\n        temp.next = cur.next;\r\n        cur.next = temp;\r\n        size++;\r\n\r\n    }\r\n\r\n    public void deleteAtIndex(int index) {\r\n        if(index < 0 || index > size-1){\r\n            return;\r\n        }\r\n        ListNode cur = this.head;\r\n        for(int i = 0;i < index;i++){\r\n            cur = cur.next;\r\n        }\r\n        cur.next.next.prev = cur;\r\n        cur.next = cur.next.next;\r\n        size--;\r\n    }\r\n}\r\n\n"})}),"\n",(0,i.jsx)(e.h2,{id:"206\u53cd\u8f6c\u94fe\u8868",children:"206.\u53cd\u8f6c\u94fe\u8868"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/reverse-linked-list/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,i.jsx)(e.p,{children:"\u9898\u610f\uff1a\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL"}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"//\u53cc\u6307\u9488\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode reverseList(ListNode head) {\r\n        ListNode first = head;\r\n        ListNode second = null;\r\n        ListNode pre = null;\r\n        while(first != null){\r\n            second = first.next;\r\n            first.next = pre;\r\n            pre = first;\r\n            first = second;\r\n        }\r\n        return pre;\r\n    }\r\n}\r\n\r\n//\u9012\u5f52\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode reverseList(ListNode head) {\r\n        return reverse(null,head);\r\n    }\r\n    public ListNode reverse(ListNode pre,ListNode first){\r\n        if(first == null){\r\n            return pre;\r\n        }\r\n\r\n        ListNode second = first.next;\r\n        first.next = pre;\r\n        return reverse(first,second);\r\n\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"// \u4ece\u540e\u5411\u524d\u9012\u5f52\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode reverseList(ListNode head) {\r\n        if(head == null || head.next == null) return head;\r\n\r\n        ListNode last = reverseList(head.next);//\u7ffb\u8f6c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u4e4b\u540e\u7684\u8282\u70b9\r\n        head.next.next = head;\r\n        head.next = null;\r\n        return last;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"24-\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",children:"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/swap-nodes-in-pairs/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,i.jsx)(e.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode swapPairs(ListNode head) {\r\n        if(head == null || head.next == null) return head;\r\n        ListNode cur = head;\r\n        head = cur.next;\r\n        ListNode temp = null;\r\n        ListNode pre = null;\r\n        while(cur != null && cur.next != null){\r\n            if(pre != null){\r\n                pre.next = cur.next;//\u6b65\u9aa4\u4e00\uff0c\u53ef\u4ee5\u4f7f\u7528\u865a\u62df\u5934\u8282\u70b9\uff0c\u5c31\u53ef\u4ee5\u907f\u514d\u5224\u65ad\r\n            }\r\n            temp = cur.next.next;\r\n            cur.next.next = cur;//\u6b65\u9aa4\u4e8c\r\n            cur.next = temp;//\u6b65\u9aa4\u4e09\uff0c\u4ea4\u6362\u6b65\u9aa4\u4e8c\u548c\u4e09\u53ef\u4ee5\u4e0d\u7528\u52a0temp\u8282\u70b9\r\n            pre = cur;\r\n            cur = temp;\r\n        }\r\n        return head;\r\n    }\r\n}\r\n//\u9012\u5f52\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode swapPairs(ListNode head) {\r\n        if(head == null || head.next == null) return head;\r\n        ListNode cur = head;\r\n        head = cur.next;\r\n        ListNode last = swapPairs(cur.next.next);\r\n        cur.next.next = cur;\r\n        cur.next = last;\r\n        return head;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"19\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c-n-\u4e2a\u8282\u70b9",children:"19.\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u8282\u70b9"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,i.jsx)(e.p,{children:"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u7ed3\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u8fdb\u9636\uff1a\u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f"}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode() {}\r\n *     ListNode(int val) { this.val = val; }\r\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode removeNthFromEnd(ListNode head, int n) {\r\n        ListNode dummy = new ListNode(0);\r\n        dummy.next = head;\r\n        ListNode cur = dummy;\r\n        ListNode temp = cur;\r\n\r\n        for(int i = 0;i < n;i++){\r\n            temp = temp.next;\r\n        }\r\n        while(temp.next != null){\r\n            cur = cur.next;\r\n            temp = temp.next;\r\n        }\r\n        cur.next = cur.next.next;\r\n        return dummy.next;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u9762\u8bd5\u9898-0207-\u94fe\u8868\u76f8\u4ea4",children:"\u9762\u8bd5\u9898 02.07. \u94fe\u8868\u76f8\u4ea4"}),"\n",(0,i.jsx)(e.p,{children:"\u540c\uff1a160.\u94fe\u8868\u76f8\u4ea4"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,i.jsx)(e.p,{children:"\u7ed9\u4f60\u4e24\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 headA \u548c headB \uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de null \u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        ListNode A = headA;\r\n        ListNode B = headB;\r\n        int cur = 1;\r\n        int size = 0;\r\n        ListNode temp = null;\r\n        while(A != null){\r\n            size++;\r\n            A = A.next;\r\n        }\r\n        while(cur <= size && B != null){\r\n            A = headA;\r\n            B = headB;\r\n            for(int i = 0;i < size - cur;i++){\r\n                A = A.next;\r\n            }\r\n            while(B != null){\r\n                if(B == A){\r\n                    cur++;\r\n                    temp = A;\r\n                    break;\r\n                }\r\n                B = B.next;\r\n            }\r\n        }\r\n        return temp;\r\n    }\r\n}//\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u540c\u6b65\u79fb\u52a8\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"//\u5408\u5e76\u94fe\u8868\u5b9e\u73b0\u540c\u6b65\u79fb\u52a8\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        ListNode A = headA;\r\n        ListNode B = headB;\r\n        while(A != B){\r\n            if(A == null){\r\n                A = headB;\r\n            } else{\r\n                A = A.next;\r\n            }\r\n            if(B == null){\r\n                B = headA;\r\n            } else{\r\n                B = B.next;\r\n            }\r\n        }\r\n        return A;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"142\u73af\u5f62\u94fe\u8868-ii",children:"142.\u73af\u5f62\u94fe\u8868 II"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/linked-list-cycle-ii/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,i.jsx)(e.p,{children:"\u9898\u610f\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de null\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002 \u5982\u679c pos \u662f -1\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u8bf4\u660e"}),"\uff1a\u4e0d\u5141\u8bb8\u4fee\u6539\u7ed9\u5b9a\u7684\u94fe\u8868\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"20250707_130730_046",src:r(79699).A+"",width:"2448",height:"2077"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u6ce8 1"}),"\uff1a\u56e0\u4e3a ",(0,i.jsx)(e.span,{className:"katex",children:(0,i.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mopen",children:"("}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"c"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(e.span,{className:"mbin",children:"\u2212"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(e.span,{className:"mclose",children:")"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(e.span,{className:"mbin",children:"+"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"a"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(e.span,{className:"mrel",children:"="}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6944em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"c"})]})]})}),"\uff0c\u4ece ",(0,i.jsx)(e.span,{className:"katex",children:(0,i.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.7778em",verticalAlign:"-0.0833em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"c"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(e.span,{className:"mbin",children:"\u2212"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"a"})]})]})})," \u5f00\u59cb\uff0c\u518d\u8d70 a \u6b65\uff0c\u5c31\u53ef\u4ee5\u8d70\u6ee1 k \u5708\u3002\u60f3\u8c61\u4f60\u5728\u64cd\u573a\u4e0a\u8dd1\u6b65\uff0c\u4ece\u5165\u73af\u53e3\u5f00\u59cb\u8dd1\uff0c\u8dd1\u6ee1 k \u5708\uff0c\u4f60\u73b0\u5728\u4eba\u5728\u54ea\uff1f\u521a\u597d\u5728\u5165\u73af\u53e3\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u6ce8 2"}),"\uff1a\u6162\u6307\u9488\u4ece\u76f8\u9047\u70b9\u5f00\u59cb\uff0c\u79fb\u52a8 a \u6b65\u540e\u6070\u597d\u8d70\u5230\u5165\u73af\u53e3\uff0c\u4f46\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u591a\u6b21\u7ecf\u8fc7\u5165\u73af\u53e3\u3002"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode detectCycle(ListNode head) {\r\n        ListNode fast = head;\r\n        ListNode slow = head;\r\n        boolean iscircle = false;\r\n        while(fast != null && fast.next != null && slow.next != null){\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n            if(fast == slow){\r\n                iscircle =true;\r\n                break;\r\n            }\r\n        }\r\n        if(iscircle == false) return null;\r\n        ListNode temp = fast;\r\n        fast = fast.next;\r\n        slow =head;\r\n        while(temp != slow){\r\n            while(temp != fast){\r\n                if(fast ==slow){\r\n                    return slow;\r\n                } else{\r\n                    fast = fast.next;\r\n                }\r\n            }\r\n            fast = fast.next;\r\n            slow = slow.next;\r\n        }\r\n        return slow;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"//\u79d2\u89e3\r\n/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode detectCycle(ListNode head) {\r\n        ListNode fast = head;\r\n        ListNode slow = head;\r\n        while(fast != null && fast.next != null){\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n            if(fast == slow){\r\n                slow = head;\r\n                while(slow != fast){\r\n                    slow = slow.next;\r\n                    fast = fast.next;\r\n                }\r\n                return slow;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"img",src:r(17220).A+"",width:"1269",height:"845"})}),"\n",(0,i.jsx)(e.h2,{id:"\u5176\u4ed6",children:"\u5176\u4ed6"}),"\n",(0,i.jsx)(e.h3,{id:"234-\u56de\u6587\u94fe\u8868",children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/palindrome-linked-list/",children:"234. \u56de\u6587\u94fe\u8868"})}),"\n",(0,i.jsxs)(e.p,{children:["\u7ed9\u4f60\u4e00\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 ",(0,i.jsx)(e.code,{children:"head"})," \uff0c\u8bf7\u4f60\u5224\u65ad\u8be5\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de ",(0,i.jsx)(e.code,{children:"true"})," \uff1b\u5426\u5219\uff0c\u8fd4\u56de ",(0,i.jsx)(e.code,{children:"false"})," \u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"// \u4f7f\u7528deque\r\nimport java.util.*;\r\nclass Solution {\r\n    public boolean isPalindrome(ListNode head) {\r\n        if(head == null) return false;\r\n        else if(head.next == null) return true;\r\n\r\n        Deque<Integer> deque = new LinkedList<>();\r\n        while(head!= null){\r\n            deque.addFirst(head.val);\r\n            head = head.next;\r\n\r\n        }\r\n\r\n        while(deque.size() > 1){\r\n            if(deque.pollFirst() != deque.pollLast()) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n//\u53cc\u6307\u9488\r\nimport java.util.*;\r\nclass Solution {\r\n    public boolean isPalindrome(ListNode head) {\r\n        if(head == null) return false;\r\n        else if(head.next == null) return true;\r\n        ListNode slow = head;\r\n        ListNode fast = head;\r\n        while(fast != null && fast.next != null){\r\n            slow = slow.next;\r\n            fast = fast.next.next;\r\n        }\r\n\r\n        ListNode cur1 = head;\r\n        ListNode cur2 = reverseList(slow);\r\n\r\n        while(cur1 != null && cur2 != null){\r\n            if(cur1.val != cur2.val) return false;\r\n            cur1 = cur1.next;\r\n            cur2 = cur2.next;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public ListNode reverseList(ListNode head) {\r\n        if(head == null || head.next == null) return head;\r\n\r\n        ListNode last = reverseList(head.next);\r\n        head.next.next = head;\r\n        head.next = null;\r\n        return last;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"143-\u91cd\u6392\u94fe\u8868",children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/reorder-list/",children:"143. \u91cd\u6392\u94fe\u8868"})}),"\n",(0,i.jsxs)(e.p,{children:["\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868 ",(0,i.jsx)(e.code,{children:"L"})," \u7684\u5934\u8282\u70b9 ",(0,i.jsx)(e.code,{children:"head"})," \uff0c\u5355\u94fe\u8868 ",(0,i.jsx)(e.code,{children:"L"})," \u8868\u793a\u4e3a\uff1a"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u8bf7\u5c06\u5176\u91cd\u65b0\u6392\u5217\u540e\u53d8\u4e3a\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"// \u53cc\u5411\u94fe\u8868\r\nimport java.util.*;\r\nclass Solution {\r\n    public void reorderList(ListNode head) {\r\n        if(head == null || head.next == null) return;\r\n        ListNode cur = head.next;\r\n        Deque<ListNode> deque = new LinkedList<>();\r\n        while(cur != null){\r\n            deque.offerLast(cur);\r\n            cur = cur.next;\r\n        }\r\n\r\n        cur = head;\r\n        while(deque.size() > 1){\r\n            cur.next = deque.pollLast();\r\n            cur.next.next = deque.pollFirst();\r\n            cur = cur.next.next;\r\n        }\r\n        if(deque.size() == 1){\r\n            cur.next = deque.pollFirst();\r\n            cur = cur.next;\r\n        }\r\n        cur.next = null;\r\n    }\r\n}\r\n\r\n// \u5229\u7528\u65cb\u8f6c\u94fe\u8868\r\nclass Solution {\r\n    public void reorderList(ListNode head) {\r\n        if(head == null || head.next == null) return;\r\n        ListNode fast = head, slow = head;\r\n        while(fast.next != null && fast.next.next != null){\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n        }\r\n        ListNode second = slow.next;\r\n        slow.next = null;\r\n        second = reverseList(second);\r\n\r\n        ListNode first = head;\r\n        while(second != null){\r\n            ListNode temp = first.next;\r\n            first.next = second;\r\n            second = second.next;\r\n            first.next.next = temp;\r\n            first = temp;\r\n        }\r\n    }\r\n\r\n    public ListNode reverseList(ListNode head) {\r\n        if(head == null || head.next == null) return head;\r\n\r\n        ListNode last = reverseList(head.next);\r\n        head.next.next = head;\r\n        head.next = null;\r\n        return last;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"141-\u73af\u5f62\u94fe\u8868",children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/linked-list-cycle/",children:"141. \u73af\u5f62\u94fe\u8868"})}),"\n",(0,i.jsxs)(e.p,{children:["\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 ",(0,i.jsx)(e.code,{children:"head"})," \uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a ",(0,i.jsx)(e.code,{children:"next"})," \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 ",(0,i.jsx)(e.code,{children:"pos"})," \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002",(0,i.jsxs)(e.strong,{children:["\u6ce8\u610f\uff1a",(0,i.jsx)(e.code,{children:"pos"})," \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012"]})," \u3002\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.em,{children:"\u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u73af"})," \uff0c\u5219\u8fd4\u56de ",(0,i.jsx)(e.code,{children:"true"})," \u3002 \u5426\u5219\uff0c\u8fd4\u56de ",(0,i.jsx)(e.code,{children:"false"})," \u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"public class Solution {\r\n    public boolean hasCycle(ListNode head) {\r\n        if(head == null) return false;\r\n        ListNode slow = head;\r\n        ListNode fast = head;\r\n        while(fast!= null && fast.next!= null){\r\n            slow = slow.next;\r\n            fast = fast.next.next;\r\n            if(slow == fast) return true;\r\n        }\r\n        return false;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"160-\u76f8\u4ea4\u94fe\u8868",children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/intersection-of-two-linked-lists/",children:"160. \u76f8\u4ea4\u94fe\u8868"})}),"\n",(0,i.jsxs)(e.p,{children:["\u7ed9\u4f60\u4e24\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 ",(0,i.jsx)(e.code,{children:"headA"})," \u548c ",(0,i.jsx)(e.code,{children:"headB"})," \uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u4e0d\u5b58\u5728\u76f8\u4ea4\u8282\u70b9\uff0c\u8fd4\u56de ",(0,i.jsx)(e.code,{children:"null"})," \u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u56fe\u793a\u4e24\u4e2a\u94fe\u8868\u5728\u8282\u70b9 ",(0,i.jsx)(e.code,{children:"c1"})," \u5f00\u59cb\u76f8\u4ea4**\uff1a**"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png",children:(0,i.jsx)(e.img,{src:"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png",alt:"img"})})}),"\n",(0,i.jsxs)(e.p,{children:["\u9898\u76ee\u6570\u636e ",(0,i.jsx)(e.strong,{children:"\u4fdd\u8bc1"})," \u6574\u4e2a\u94fe\u5f0f\u7ed3\u6784\u4e2d\u4e0d\u5b58\u5728\u73af\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"\u6ce8\u610f"}),"\uff0c\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u94fe\u8868\u5fc5\u987b ",(0,i.jsx)(e.strong,{children:"\u4fdd\u6301\u5176\u539f\u59cb\u7ed3\u6784"})," \u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54:"}),"\n",(0,i.jsxs)(e.p,{children:["\u4e00\u79cd\u662f",(0,i.jsx)(e.strong,{children:"\u54c8\u5e0c"})]}),"\n",(0,i.jsxs)(e.p,{children:["\u4e00\u79cd\u662f",(0,i.jsx)(e.strong,{children:"\u5faa\u73af\u8df3"}),",\u76f4\u5230\u76f8\u9047"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, x):\r\n#         self = x\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\r\n        p = headA\r\n        q = headB\r\n        while p != q:\r\n            p = p.next if p else headB\r\n            q = q.next if q else headA\r\n        return p\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-\u4e24\u6570\u76f8\u52a0",children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/add-two-numbers/",children:"2. \u4e24\u6570\u76f8\u52a0"})}),"\n",(0,i.jsxs)(e.p,{children:["\u7ed9\u4f60\u4e24\u4e2a ",(0,i.jsx)(e.strong,{children:"\u975e\u7a7a"})," \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 ",(0,i.jsx)(e.strong,{children:"\u9006\u5e8f"})," \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 ",(0,i.jsx)(e.strong,{children:"\u4e00\u4f4d"})," \u6570\u5b57\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# \u9012\u5f52 \u539f\u5730\u64cd\u4f5c\r\n# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode], carry=0) -> Optional[ListNode]:\r\n        if l1 is None and l2 is None:\r\n            return ListNode(carry) if carry else None\r\n        if l1 is None:\r\n            l1, l2 = l2, l1\r\n        carry += l1.val + (l2.val if l2 else 0)\r\n        l1.val = carry%10\r\n        l1.next = self.addTwoNumbers(l1.next, l2.next if l2 else None, carry//10)\r\n        return l1\n"})}),"\n",(0,i.jsx)(e.h3,{id:"25-k-\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/reverse-nodes-in-k-group/",children:"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868"})}),"\n",(0,i.jsxs)(e.p,{children:["\u7ed9\u4f60\u94fe\u8868\u7684\u5934\u8282\u70b9 ",(0,i.jsx)(e.code,{children:"head"})," \uff0c\u6bcf ",(0,i.jsx)(e.code,{children:"k"})," \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u4fee\u6539\u540e\u7684\u94fe\u8868\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"k"})," \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002\u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f ",(0,i.jsx)(e.code,{children:"k"})," \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54:"}),"\n",(0,i.jsx)(e.p,{children:"\u52a0\u5165\u54e8\u5175p0"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\r\n        n = 0\r\n        cur = head\r\n        while cur:\r\n            cur = cur.next\r\n            n += 1\r\n        \r\n        dummy = ListNode(next=head) # dummy\u662f\u865a\u62df\u5934\u8282\u70b9,\u9996\u6b21\u64cd\u4f5c\u65f6\u5c06\u5b83\u5f53\u4f5c\u4e0a\u4e00\u4e2a\u94fe\u8868\u7684\u5c3e\u8282\u70b9,\u6240\u4ee5\u9996\u6b21\u64cd\u4f5c\u540e\u6210\u4e3a\u6b63\u786e\u94fe\u8868\u7684\u865a\u62df\u5934\u8282\u70b9\r\n        p0 = dummy # p0\u4f4d\u7f6e\u7684\u8282\u70b9\u662f\u4e0a\u4e0a\u4e00\u4e2a\u7684\u94fe\u8868\u7684\u5c3e,\u4e14\u5b83\u6307\u5411\u4e0b\u4e00\u4e2a\u672a\u64cd\u4f5c\u7684\u94fe\u8868\u7684\u5934\r\n        pre = None\r\n        cur = head\r\n\r\n        while n >= k:\r\n            n -= k\r\n\r\n            for _ in range(k):\r\n                nxt = cur.next\r\n                cur.next = pre\r\n                pre = cur\r\n                cur = nxt\r\n            \r\n            nxt = p0.next\r\n            nxt.next = cur\r\n            p0.next = pre\r\n            p0 = nxt\r\n        return dummy.next\n"})}),"\n",(0,i.jsx)(e.h3,{id:"138-\u968f\u673a\u94fe\u8868\u7684\u590d\u5236",children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/copy-list-with-random-pointer/",children:"138. \u968f\u673a\u94fe\u8868\u7684\u590d\u5236"})}),"\n",(0,i.jsxs)(e.p,{children:["\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a ",(0,i.jsx)(e.code,{children:"n"})," \u7684\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488 ",(0,i.jsx)(e.code,{children:"random"})," \uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u6784\u9020\u8fd9\u4e2a\u94fe\u8868\u7684 ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin",children:"\u6df1\u62f7\u8d1d"})}),"\u3002 \u6df1\u62f7\u8d1d\u5e94\u8be5\u6b63\u597d\u7531 ",(0,i.jsx)(e.code,{children:"n"})," \u4e2a ",(0,i.jsx)(e.strong,{children:"\u5168\u65b0"})," \u8282\u70b9\u7ec4\u6210\uff0c\u5176\u4e2d\u6bcf\u4e2a\u65b0\u8282\u70b9\u7684\u503c\u90fd\u8bbe\u4e3a\u5176\u5bf9\u5e94\u7684\u539f\u8282\u70b9\u7684\u503c\u3002\u65b0\u8282\u70b9\u7684 ",(0,i.jsx)(e.code,{children:"next"})," \u6307\u9488\u548c ",(0,i.jsx)(e.code,{children:"random"})," \u6307\u9488\u4e5f\u90fd\u5e94\u6307\u5411\u590d\u5236\u94fe\u8868\u4e2d\u7684\u65b0\u8282\u70b9\uff0c\u5e76\u4f7f\u539f\u94fe\u8868\u548c\u590d\u5236\u94fe\u8868\u4e2d\u7684\u8fd9\u4e9b\u6307\u9488\u80fd\u591f\u8868\u793a\u76f8\u540c\u7684\u94fe\u8868\u72b6\u6001\u3002",(0,i.jsx)(e.strong,{children:"\u590d\u5236\u94fe\u8868\u4e2d\u7684\u6307\u9488\u90fd\u4e0d\u5e94\u6307\u5411\u539f\u94fe\u8868\u4e2d\u7684\u8282\u70b9"})," \u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u4f8b\u5982\uff0c\u5982\u679c\u539f\u94fe\u8868\u4e2d\u6709 ",(0,i.jsx)(e.code,{children:"X"})," \u548c ",(0,i.jsx)(e.code,{children:"Y"})," \u4e24\u4e2a\u8282\u70b9\uff0c\u5176\u4e2d ",(0,i.jsx)(e.code,{children:"X.random --\x3e Y"})," \u3002\u90a3\u4e48\u5728\u590d\u5236\u94fe\u8868\u4e2d\u5bf9\u5e94\u7684\u4e24\u4e2a\u8282\u70b9 ",(0,i.jsx)(e.code,{children:"x"})," \u548c ",(0,i.jsx)(e.code,{children:"y"})," \uff0c\u540c\u6837\u6709 ",(0,i.jsx)(e.code,{children:"x.random --\x3e y"})," \u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u8fd4\u56de\u590d\u5236\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002"}),"\n",(0,i.jsxs)(e.p,{children:["\u7528\u4e00\u4e2a\u7531 ",(0,i.jsx)(e.code,{children:"n"})," \u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u94fe\u8868\u6765\u8868\u793a\u8f93\u5165/\u8f93\u51fa\u4e2d\u7684\u94fe\u8868\u3002\u6bcf\u4e2a\u8282\u70b9\u7528\u4e00\u4e2a ",(0,i.jsx)(e.code,{children:"[val, random_index]"})," \u8868\u793a\uff1a"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"val"}),"\uff1a\u4e00\u4e2a\u8868\u793a ",(0,i.jsx)(e.code,{children:"Node.val"})," \u7684\u6574\u6570\u3002"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"random_index"}),"\uff1a\u968f\u673a\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u7d22\u5f15\uff08\u8303\u56f4\u4ece ",(0,i.jsx)(e.code,{children:"0"})," \u5230 ",(0,i.jsx)(e.code,{children:"n-1"}),"\uff09\uff1b\u5982\u679c\u4e0d\u6307\u5411\u4efb\u4f55\u8282\u70b9\uff0c\u5219\u4e3a ",(0,i.jsx)(e.code,{children:"null"})," \u3002"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["\u4f60\u7684\u4ee3\u7801 ",(0,i.jsx)(e.strong,{children:"\u53ea"})," \u63a5\u53d7\u539f\u94fe\u8868\u7684\u5934\u8282\u70b9 ",(0,i.jsx)(e.code,{children:"head"})," \u4f5c\u4e3a\u4f20\u5165\u53c2\u6570\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"\"\"\"\r\n# Definition for a Node.\r\nclass Node:\r\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\r\n        self.val = int(x)\r\n        self.next = next\r\n        self.random = random\r\n\"\"\"\r\n\r\nclass Solution:\r\n    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':\r\n        if head is None:\r\n            return None\r\n        p0 = head\r\n        while p0: #\u62f7\u8d1dval\u548cnext\r\n            p0.next = Node(x=p0.val, next=p0.next)\r\n            p0 = p0.next.next\r\n\r\n        dummy = head.next\r\n\r\n        p0 = head\r\n        while p0: #\u62f7\u8d1drandom\r\n            p0.next.random = p0.random.next if p0.random else None\r\n            p0 = p0.next.next\r\n        \r\n        p0 = head\r\n        while p0:\r\n            p1 = p0.next\r\n            p0.next = p0.next.next\r\n            p1.next = p1.next.next if p1.next else None\r\n            p0 = p0.next\r\n        \r\n        return dummy\n"})}),"\n",(0,i.jsx)(e.h3,{id:"148-\u6392\u5e8f\u94fe\u8868",children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/sort-list/",children:"148. \u6392\u5e8f\u94fe\u8868"})}),"\n",(0,i.jsxs)(e.p,{children:["\u7ed9\u4f60\u94fe\u8868\u7684\u5934\u7ed3\u70b9 ",(0,i.jsx)(e.code,{children:"head"})," \uff0c\u8bf7\u5c06\u5176\u6309 ",(0,i.jsx)(e.strong,{children:"\u5347\u5e8f"})," \u6392\u5217\u5e76\u8fd4\u56de ",(0,i.jsx)(e.strong,{children:"\u6392\u5e8f\u540e\u7684\u94fe\u8868"})," \u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54:"}),"\n",(0,i.jsxs)(e.p,{children:["\u65b9\u6cd5\u4e00",(0,i.jsx)(e.strong,{children:"\u5f52\u5e76\u6392\u5e8f"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def midNode(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        slow = fast = head\r\n        pre = head\r\n        while fast:\r\n            fast = fast.next.next if fast.next else None\r\n            pre = slow\r\n            slow = slow.next\r\n        pre.next = None\r\n        return slow\r\n\r\n    def MergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\r\n        p0 = dummy = ListNode(0)\r\n        first, second = list1, list2\r\n        while first and second:\r\n            if first.val <= second.val:\r\n                p0.next = first\r\n                first = first.next\r\n            else:\r\n                p0.next = second\r\n                second = second.next\r\n            p0 = p0.next\r\n        p0.next = first if first else second\r\n        return dummy.next\r\n\r\n\r\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\r\n        if head is None or head.next is None:\r\n            return head\r\n        \r\n        list2 = self.sortList(self.midNode(head))\r\n        list1 = self.sortList(head)\r\n\r\n        return self.MergeTwoLists(list1, list2)\n"})}),"\n",(0,i.jsxs)(e.p,{children:["\u65b9\u6cd5\u4e00\u7684\u5f52\u5e76\u662f",(0,i.jsx)(e.strong,{children:"\u81ea\u9876\u5411\u4e0b"}),"\u8ba1\u7b97\uff0c\u9700\u8981 O(logn) \u7684\u9012\u5f52\u6808\u5f00\u9500\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u65b9\u6cd5\u4e8c\u5c06\u5176\u6539\u6210",(0,i.jsx)(e.strong,{children:"\u81ea\u5e95\u5411\u4e0a"}),"\u8ba1\u7b97\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u6210 O(1)\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u81ea\u5e95\u5411\u4e0a\u7684\u610f\u601d\u662f\uff1a"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u9996\u5148\uff0c\u5f52\u5e76\u957f\u5ea6\u4e3a 1 \u7684\u5b50\u94fe\u8868\u3002\u4f8b\u5982 [4,2,1,3]\uff0c\u628a\u7b2c\u4e00\u4e2a\u8282\u70b9\u548c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u5f52\u5e76\uff0c\u7b2c\u4e09\u4e2a\u8282\u70b9\u548c\u7b2c\u56db\u4e2a\u8282\u70b9\u5f52\u5e76\uff0c\u5f97\u5230 [2,4,1,3]\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u7136\u540e\uff0c\u5f52\u5e76\u957f\u5ea6\u4e3a 2 \u7684\u5b50\u94fe\u8868\u3002\u4f8b\u5982 [2,4,1,3]\uff0c\u628a\u524d\u4e24\u4e2a\u8282\u70b9\u548c\u540e\u4e24\u4e2a\u8282\u70b9\u5f52\u5e76\uff0c\u5f97\u5230 [1,2,3,4]\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u7136\u540e\uff0c\u5f52\u5e76\u957f\u5ea6\u4e3a 4 \u7684\u5b50\u94fe\u8868\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u4f9d\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u5f52\u5e76\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u94fe\u8868\u957f\u5ea6\u4e3a\u6b62\uff0c\u6b64\u65f6\u94fe\u8868\u5df2\u7ecf\u662f\u6709\u5e8f\u7684\u4e86\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u5177\u4f53\u7b97\u6cd5\uff1a"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"\u904d\u5386\u94fe\u8868\uff0c\u83b7\u53d6\u94fe\u8868\u957f\u5ea6 length\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u521d\u59cb\u5316\u6b65\u957f step=1\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u5faa\u73af\u76f4\u5230 step\u2265length\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u6bcf\u8f6e\u5faa\u73af\uff0c\u4ece\u94fe\u8868\u5934\u8282\u70b9\u5f00\u59cb\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u5206\u5272\u51fa\u4e24\u6bb5\u957f\u4e3a step \u7684\u94fe\u8868\uff0c\u5408\u5e76\uff0c\u628a\u5408\u5e76\u540e\u7684\u94fe\u8868\u63d2\u5230\u65b0\u94fe\u8868\u7684\u672b\u5c3e\u3002\u91cd\u590d\u8be5\u6b65\u9aa4\uff0c\u76f4\u5230\u94fe\u8868\u904d\u5386\u5b8c\u6bd5\u3002"}),"\n",(0,i.jsx)(e.li,{children:"\u628a step \u6269\u5927\u4e00\u500d\u3002\u56de\u5230\u7b2c 4 \u6b65\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"23-\u5408\u5e76-k-\u4e2a\u5347\u5e8f\u94fe\u8868",children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/merge-k-sorted-lists/",children:"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868"})}),"\n",(0,i.jsx)(e.p,{children:"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54:"}),"\n",(0,i.jsx)(e.h4,{id:"\u65b9\u6cd5\u4e00\u5206\u6cbb",children:"\u65b9\u6cd5\u4e00:\u5206\u6cbb"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\nclass Solution:\r\n    def MergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\r\n        p0 = dummy = ListNode(0)\r\n        first, second = list1, list2\r\n        while first and second:\r\n            if first.val <= second.val:\r\n                p0.next = first\r\n                first = first.next\r\n            else:\r\n                p0.next = second\r\n                second = second.next\r\n            p0 = p0.next\r\n        p0.next = first if first else second\r\n        return dummy.next\r\n        \r\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\r\n        k = len(lists)\r\n        if k == 1:\r\n            return lists[0]\r\n        elif k == 0:\r\n            return None\r\n        \r\n        left = self.mergeKLists(lists[0:k//2])\r\n        right = self.mergeKLists(lists[k//2:])\r\n\r\n        return self.MergeTwoLists(left, right)\n"})}),"\n",(0,i.jsx)(e.h4,{id:"\u65b9\u6cd5\u4e8c\u6700\u5c0f\u5806",children:"\u65b9\u6cd5\u4e8c:\u6700\u5c0f\u5806"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, val=0, next=None):\r\n#         self.val = val\r\n#         self.next = next\r\n\r\nListNode.__lt__ = lambda a, b :a.val < b.val\r\nclass Solution:        \r\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\r\n        cur = dummy = ListNode()\r\n        h = [head for head in lists if head]\r\n        heapify(h) # \u5806\u5316,\u7c7b\u4f3c java \u7684\u4f18\u5148\u5bf9\u5217\r\n        while h:\r\n            node = heappop(h)\r\n            if node.next:\r\n                heappush(h, node.next)\r\n            cur.next = node\r\n            cur = cur.next\r\n        return dummy.next\n"})}),"\n",(0,i.jsx)(e.h3,{id:"146-lru-\u7f13\u5b58",children:(0,i.jsx)(e.a,{href:"https://leetcode.cn/problems/lru-cache/",children:"146. LRU \u7f13\u5b58"})}),"\n",(0,i.jsxs)(e.p,{children:["\u8bf7\u4f60\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u6ee1\u8db3 ",(0,i.jsx)(e.a,{href:"https://baike.baidu.com/item/LRU",children:"LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58"})," \u7ea6\u675f\u7684\u6570\u636e\u7ed3\u6784\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u5b9e\u73b0 ",(0,i.jsx)(e.code,{children:"LRUCache"})," \u7c7b\uff1a"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"LRUCache(int capacity)"})," \u4ee5 ",(0,i.jsx)(e.strong,{children:"\u6b63\u6574\u6570"})," \u4f5c\u4e3a\u5bb9\u91cf ",(0,i.jsx)(e.code,{children:"capacity"})," \u521d\u59cb\u5316 LRU \u7f13\u5b58"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"int get(int key)"})," \u5982\u679c\u5173\u952e\u5b57 ",(0,i.jsx)(e.code,{children:"key"})," \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u8fd4\u56de\u5173\u952e\u5b57\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de ",(0,i.jsx)(e.code,{children:"-1"})," \u3002"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"void put(int key, int value)"})," \u5982\u679c\u5173\u952e\u5b57 ",(0,i.jsx)(e.code,{children:"key"})," \u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u53d8\u66f4\u5176\u6570\u636e\u503c ",(0,i.jsx)(e.code,{children:"value"})," \uff1b\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u5411\u7f13\u5b58\u4e2d\u63d2\u5165\u8be5\u7ec4 ",(0,i.jsx)(e.code,{children:"key-value"})," \u3002\u5982\u679c\u63d2\u5165\u64cd\u4f5c\u5bfc\u81f4\u5173\u952e\u5b57\u6570\u91cf\u8d85\u8fc7 ",(0,i.jsx)(e.code,{children:"capacity"})," \uff0c\u5219\u5e94\u8be5 ",(0,i.jsx)(e.strong,{children:"\u9010\u51fa"})," \u6700\u4e45\u672a\u4f7f\u7528\u7684\u5173\u952e\u5b57\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["\u51fd\u6570 ",(0,i.jsx)(e.code,{children:"get"})," \u548c ",(0,i.jsx)(e.code,{children:"put"})," \u5fc5\u987b\u4ee5 ",(0,i.jsx)(e.code,{children:"O(1)"})," \u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u8fd0\u884c\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u89e3\u7b54:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"// \u91c7\u7528\u53cc\u5411\u5faa\u73af\u94fe\u8868\r\nclass LRUCache {\r\n    private static class Node{\r\n        int key, value;\r\n        Node pre, next;\r\n\r\n        Node(int k, int v){\r\n            key = k;\r\n            value = v;\r\n        }\r\n    }\r\n\r\n    private final int capacity;\r\n    private final Node dummy = new Node(0, 0); // \u5934\u8282\u70b9\r\n    private final Map<Integer, Node> map = new HashMap<>();\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        dummy.next = dummy; \r\n        dummy.pre = dummy;\r\n    }\r\n    \r\n    public int get(int key) {\r\n        Node node = getNode(key);\r\n        return node == null ? -1 : node.value;\r\n    }\r\n    \r\n    public void put(int key, int value) {\r\n        Node node = getNode(key);\r\n        if(node != null){\r\n            node.value = value;\r\n            return;\r\n        }\r\n\r\n        node = new Node(key, value);\r\n        map.put(key, node);\r\n        pushFront(node);\r\n        if(map.size() > capacity){\r\n            Node backNode = dummy.pre;\r\n            map.remove(backNode.key);\r\n            remove(backNode);\r\n        }\r\n    }\r\n\r\n    private Node getNode(int key){\r\n        if(!map.containsKey(key)){\r\n            return null;\r\n        }\r\n\r\n        Node node = map.get(key);\r\n        remove(node);\r\n        pushFront(node);\r\n        return node;\r\n        \r\n    }\r\n\r\n    private void remove(Node x) {\r\n        x.pre.next = x.next;\r\n        x.next.pre = x.pre;\r\n    }\r\n\r\n    private void pushFront(Node x){\r\n        x.pre = dummy;\r\n        x.next = dummy.next;\r\n        x.next.pre = x;\r\n        x.pre.next = x;\r\n    }\r\n}\r\n\r\n/**\r\n * Your LRUCache object will be instantiated and called as such:\r\n * LRUCache obj = new LRUCache(capacity);\r\n * int param_1 = obj.get(key);\r\n * obj.put(key,value);\r\n */\n"})})]})}function x(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},79699:(n,e,r)=>{r.d(e,{A:()=>s});const s=r.p+"assets/images/20250707_130730_046-f7c975fab06fb755b84c4140c8a92e30.png"},17220:(n,e,r)=>{r.d(e,{A:()=>s});const s=r.p+"assets/images/\u94fe\u8868\u603b\u7ed3-9f254adeb57ea998f19e78342da7668d.png"},28453:(n,e,r)=>{r.d(e,{R:()=>t,x:()=>d});var s=r(96540);const i={},l=s.createContext(i);function t(n){const e=s.useContext(l);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:t(n.components),s.createElement(l.Provider,{value:e},n.children)}}}]);