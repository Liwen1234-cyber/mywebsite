"use strict";(self.webpackChunkmybase=self.webpackChunkmybase||[]).push([[9565],{10501:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u4e8c\u53c9\u6811","title":"\u4e8c\u53c9\u6811","description":"\u57fa\u7840\u77e5\u8bc6","source":"@site/docs/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u4e8c\u53c9\u6811.md","sourceDirName":"\u7801\u519c/\u5237\u9898\u8bb0\u5f55","slug":"/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u4e8c\u53c9\u6811","permalink":"/\u7801\u519c/\u5237\u9898\u8bb0\u5f55/\u4e8c\u53c9\u6811","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var l=n(74848),s=n(28453);const i={},o="\u4e8c\u53c9\u6811",d={},a=[{value:"\u57fa\u7840\u77e5\u8bc6",id:"\u57fa\u7840\u77e5\u8bc6",level:2},{value:"\u4e8c\u53c9\u6811\u7684\u79cd\u7c7b",id:"\u4e8c\u53c9\u6811\u7684\u79cd\u7c7b",level:3},{value:"\u6ee1\u4e8c\u53c9\u6811",id:"\u6ee1\u4e8c\u53c9\u6811",level:4},{value:"\u5b8c\u5168\u4e8c\u53c9\u6811",id:"\u5b8c\u5168\u4e8c\u53c9\u6811",level:4},{value:"\u4e8c\u53c9\u641c\u7d22\u6811",id:"\u4e8c\u53c9\u641c\u7d22\u6811",level:4},{value:"\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811",id:"\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811",level:4},{value:"\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u65b9\u5f0f",id:"\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u65b9\u5f0f",level:3},{value:"\u4e8c\u53c9\u6811\u7684\u904d\u5386\u65b9\u5f0f",id:"\u4e8c\u53c9\u6811\u7684\u904d\u5386\u65b9\u5f0f",level:3},{value:"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49",id:"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49",level:3},{value:"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386",id:"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386",level:2},{value:"\u4e8c\u53c9\u6811\u7684\u8fed\u4ee3\u904d\u5386",id:"\u4e8c\u53c9\u6811\u7684\u8fed\u4ee3\u904d\u5386",level:2},{value:"\u7edf\u4e00\u8fed\u4ee3\u6cd5",id:"\u7edf\u4e00\u8fed\u4ee3\u6cd5",level:2},{value:"\u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386",id:"\u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386",level:2},{value:"102.\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",id:"102\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",level:3},{value:"107.\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386 II",id:"107\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386-ii",level:3},{value:"637.\u4e8c\u53c9\u6811\u7684\u5c42\u5e73\u5747\u503c",id:"637\u4e8c\u53c9\u6811\u7684\u5c42\u5e73\u5747\u503c",level:3},{value:"429.N \u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",id:"429n-\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",level:3},{value:"515.\u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c",id:"515\u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c",level:3},{value:"116.\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488",id:"116\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488",level:3},{value:"117.\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 II",id:"117\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488-ii",level:3},{value:"104.\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",id:"104\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",level:3},{value:"111.\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",id:"111\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",level:3},{value:"226.\u7ffb\u8f6c\u4e8c\u53c9\u6811",id:"226\u7ffb\u8f6c\u4e8c\u53c9\u6811",level:2},{value:"101. \u5bf9\u79f0\u4e8c\u53c9\u6811",id:"101-\u5bf9\u79f0\u4e8c\u53c9\u6811",level:2},{value:"\u7c7b\u4f3c\u9898\u76ee",id:"\u7c7b\u4f3c\u9898\u76ee",level:3},{value:"100.\u76f8\u540c\u7684\u6811",id:"100\u76f8\u540c\u7684\u6811",level:4},{value:"572.\u53e6\u4e00\u4e2a\u6811\u7684\u5b50\u6811",id:"572\u53e6\u4e00\u4e2a\u6811\u7684\u5b50\u6811",level:4},{value:"222.\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570",id:"222\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570",level:2},{value:"110.\u5e73\u8861\u4e8c\u53c9\u6811",id:"110\u5e73\u8861\u4e8c\u53c9\u6811",level:2},{value:"257. \u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84",id:"257-\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84",level:2},{value:"404.\u5de6\u53f6\u5b50\u4e4b\u548c",id:"404\u5de6\u53f6\u5b50\u4e4b\u548c",level:2},{value:"513.\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c",id:"513\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c",level:2},{value:"112. \u8def\u5f84\u603b\u548c",id:"112-\u8def\u5f84\u603b\u548c",level:2},{value:"\u7c7b\u4f3c\u9898",id:"\u7c7b\u4f3c\u9898",level:3},{value:"106.\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"106\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",level:2},{value:"\u7c7b\u4f3c\u9898",id:"\u7c7b\u4f3c\u9898-1",level:3},{value:"654.\u6700\u5927\u4e8c\u53c9\u6811",id:"654\u6700\u5927\u4e8c\u53c9\u6811",level:2},{value:"617.\u5408\u5e76\u4e8c\u53c9\u6811",id:"617\u5408\u5e76\u4e8c\u53c9\u6811",level:2},{value:"700.\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22",id:"700\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22",level:2},{value:"98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811",id:"98\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811",level:2},{value:"530.\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee",id:"530\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee",level:2},{value:"501.\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570",id:"501\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570",level:2},{value:"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",id:"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",level:2},{value:"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",id:"235-\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",level:2},{value:"701.\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c",id:"701\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c",level:2},{value:"450.\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9",id:"450\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9",level:2},{value:"669. \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811",id:"669-\u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811",level:2},{value:"108.\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811",id:"108\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811",level:2},{value:"538.\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811",id:"538\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811",level:2},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2},{value:"\u5176\u4ed6",id:"\u5176\u4ed6",level:2},{value:"129. \u6c42\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u6570\u5b57\u4e4b\u548c",id:"129-\u6c42\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u6570\u5b57\u4e4b\u548c",level:3},{value:"1382.\u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861",id:"1382\u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861",level:3},{value:"543. \u4e8c\u53c9\u6811\u7684\u76f4\u5f84",id:"543-\u4e8c\u53c9\u6811\u7684\u76f4\u5f84",level:3},{value:"230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c K \u5c0f\u7684\u5143\u7d20",id:"230-\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c-k-\u5c0f\u7684\u5143\u7d20",level:3},{value:"114. \u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868",id:"114-\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868",level:3},{value:"437. \u8def\u5f84\u603b\u548c III",id:"437-\u8def\u5f84\u603b\u548c-iii",level:3},{value:"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c",id:"124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c",level:3},{value:"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)",id:"208-\u5b9e\u73b0-trie-\u524d\u7f00\u6811",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r.header,{children:(0,l.jsx)(r.h1,{id:"\u4e8c\u53c9\u6811",children:"\u4e8c\u53c9\u6811"})}),"\n",(0,l.jsx)(r.h2,{id:"\u57fa\u7840\u77e5\u8bc6",children:"\u57fa\u7840\u77e5\u8bc6"}),"\n",(0,l.jsx)(r.h3,{id:"\u4e8c\u53c9\u6811\u7684\u79cd\u7c7b",children:"\u4e8c\u53c9\u6811\u7684\u79cd\u7c7b"}),"\n",(0,l.jsx)(r.p,{children:"\u5728\u6211\u4eec\u89e3\u9898\u8fc7\u7a0b\u4e2d\u4e8c\u53c9\u6811\u6709\u4e24\u79cd\u4e3b\u8981\u7684\u5f62\u5f0f\uff1a\u6ee1\u4e8c\u53c9\u6811\u548c\u5b8c\u5168\u4e8c\u53c9\u6811"}),"\n",(0,l.jsx)(r.h4,{id:"\u6ee1\u4e8c\u53c9\u6811",children:"\u6ee1\u4e8c\u53c9\u6811"}),"\n",(0,l.jsx)(r.p,{children:"\u6ee1\u4e8c\u53c9\u6811\uff1a\u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u6811\u53ea\u6709\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\u548c\u5ea6\u4e3a 2 \u7684\u7ed3\u70b9\uff0c\u5e76\u4e14\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\u5728\u540c\u4e00\u5c42\u4e0a\uff0c\u5219\u8fd9\u68f5\u4e8c\u53c9\u6811\u4e3a\u6ee1\u4e8c\u53c9\u6811\u3002"}),"\n",(0,l.jsxs)(r.p,{children:["\u8fd9\u68f5\u4e8c\u53c9\u6811\u4e3a\u6ee1\u4e8c\u53c9\u6811\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u6df1\u5ea6\u4e3a k\uff0c\u6709",(0,l.jsx)(r.span,{className:"katex",children:(0,l.jsx)(r.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"0.8491em"}}),(0,l.jsxs)(r.span,{className:"mord",children:[(0,l.jsx)(r.span,{className:"mord",children:"2"}),(0,l.jsx)(r.span,{className:"msupsub",children:(0,l.jsx)(r.span,{className:"vlist-t",children:(0,l.jsx)(r.span,{className:"vlist-r",children:(0,l.jsx)(r.span,{className:"vlist",style:{height:"0.8491em"},children:(0,l.jsxs)(r.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,l.jsx)(r.span,{className:"pstrut",style:{height:"2.7em"}}),(0,l.jsx)(r.span,{className:"sizing reset-size6 size3 mtight",children:(0,l.jsxs)(r.span,{className:"mord mtight",children:[(0,l.jsx)(r.span,{className:"mord mathnormal mtight",style:{marginRight:"0.03148em"},children:"k"}),(0,l.jsx)(r.span,{className:"mbin mtight",children:"\u2212"}),(0,l.jsx)(r.span,{className:"mord mtight",children:"1"})]})})]})})})})})]})]})})}),"\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811\u3002"]}),"\n",(0,l.jsx)(r.h4,{id:"\u5b8c\u5168\u4e8c\u53c9\u6811",children:"\u5b8c\u5168\u4e8c\u53c9\u6811"}),"\n",(0,l.jsxs)(r.p,{children:["\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\uff1a\u9664\u4e86\u6700\u5e95\u5c42\u8282\u70b9\u53ef\u80fd\u6ca1\u586b\u6ee1\u5916\uff0c\u5176\u4f59\u6bcf\u5c42\u8282\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u5e76\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u82e5\u5e72\u4f4d\u7f6e\u3002\u82e5\u6700\u5e95\u5c42\u4e3a\u7b2c h \u5c42\uff08h \u4ece 1 \u5f00\u59cb\uff09\uff0c\u5219\u8be5\u5c42\u5305\u542b ",(0,l.jsx)(r.span,{className:"katex",children:(0,l.jsxs)(r.span,{className:"katex-html","aria-hidden":"true",children:[(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,l.jsx)(r.span,{className:"mord",children:"1"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.jsx)(r.span,{className:"mbin",children:"\u2212"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"0.888em"}}),(0,l.jsxs)(r.span,{className:"mord",children:[(0,l.jsx)(r.span,{className:"mord",children:"2"}),(0,l.jsx)(r.span,{className:"msupsub",children:(0,l.jsx)(r.span,{className:"vlist-t",children:(0,l.jsx)(r.span,{className:"vlist-r",children:(0,l.jsx)(r.span,{className:"vlist",style:{height:"0.888em"},children:(0,l.jsxs)(r.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,l.jsx)(r.span,{className:"pstrut",style:{height:"2.7em"}}),(0,l.jsx)(r.span,{className:"sizing reset-size6 size3 mtight",children:(0,l.jsxs)(r.span,{className:"mord mtight",children:[(0,l.jsx)(r.span,{className:"mopen mtight",children:"("}),(0,l.jsx)(r.span,{className:"mord mathnormal mtight",children:"h"}),(0,l.jsx)(r.span,{className:"mbin mtight",children:"\u2212"}),(0,l.jsx)(r.span,{className:"mord mtight",children:"1"}),(0,l.jsx)(r.span,{className:"mclose mtight",children:")"})]})})]})})})})})]})]})]})})," \u4e2a\u8282\u70b9\u3002"]}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.img,{alt:"img",src:n(82613).A+"",width:"1426",height:"670"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"\u4f18\u5148\u7ea7\u961f\u5217\u5176\u5b9e\u662f\u4e00\u4e2a\u5806"}),"\uff0c\u5806\u5c31\u662f\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u540c\u65f6\u4fdd\u8bc1\u7236\u5b50\u8282\u70b9\u7684\u987a\u5e8f\u5173\u7cfb\u3002"]}),"\n",(0,l.jsx)(r.h4,{id:"\u4e8c\u53c9\u641c\u7d22\u6811",children:"\u4e8c\u53c9\u641c\u7d22\u6811"}),"\n",(0,l.jsxs)(r.p,{children:["\u524d\u9762\u4ecb\u7ecd\u7684\u6811\uff0c\u90fd\u6ca1\u6709\u6570\u503c\u7684\uff0c\u800c\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u6709\u6570\u503c\u7684\u4e86\uff0c",(0,l.jsx)(r.strong,{children:"\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u4e00\u4e2a\u6709\u5e8f\u6811"}),"\u3002"]}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"\u82e5\u5b83\u7684\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b"}),"\n",(0,l.jsx)(r.li,{children:"\u82e5\u5b83\u7684\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b"}),"\n",(0,l.jsx)(r.li,{children:"\u5b83\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u5206\u522b\u4e3a\u4e8c\u53c9\u6392\u5e8f\u6811"}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:"\u4e0b\u9762\u8fd9\u4e24\u68f5\u6811\u90fd\u662f\u641c\u7d22\u6811:"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.img,{alt:"img",src:n(11397).A+"",width:"786",height:"276"})}),"\n",(0,l.jsx)(r.h4,{id:"\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811",children:"\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811"}),"\n",(0,l.jsx)(r.p,{children:"\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\u53c8\u88ab\u79f0\u4e3a AVL\uff08Adelson-Velsky and Landis\uff09\u6811\uff0c\u4e14\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a\u5b83\u662f\u4e00\u68f5\u7a7a\u6811\u6216\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u5982\u56fe\uff1a"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.img,{alt:"img",src:n(47147).A+"",width:"1410",height:"384"})}),"\n",(0,l.jsx)(r.p,{children:"\u6700\u540e\u4e00\u68f5 \u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u56e0\u4e3a\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u8d85\u8fc7\u4e86 1\u3002"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"C++\u4e2d map\u3001set\u3001multimap\uff0cmultiset \u7684\u5e95\u5c42\u5b9e\u73b0\u90fd\u662f\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811"}),"\uff0c\u6240\u4ee5 map\u3001set \u7684\u589e\u5220\u64cd\u4f5c\u65f6\u95f4\u65f6\u95f4\u590d\u6742\u5ea6\u662f",(0,l.jsx)(r.span,{className:"katex",children:(0,l.jsx)(r.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,l.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,l.jsx)(r.span,{className:"mord mathnormal",children:"o"}),(0,l.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,l.jsx)(r.span,{className:"mord mathnormal",children:"n"})]})})}),"\uff0c\u800c unordered_map\u3001unordered_set\uff0cunordered_map\u3001unordered_set \u5e95\u5c42\u5b9e\u73b0\u662f\u54c8\u5e0c\u8868\u3002"]}),"\n",(0,l.jsx)(r.h3,{id:"\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u65b9\u5f0f",children:"\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u65b9\u5f0f"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"\u4e8c\u53c9\u6811\u53ef\u4ee5\u94fe\u5f0f\u5b58\u50a8\uff0c\u4e5f\u53ef\u4ee5\u987a\u5e8f\u5b58\u50a8\u3002"})}),"\n",(0,l.jsx)(r.p,{children:"\u90a3\u4e48\u94fe\u5f0f\u5b58\u50a8\u65b9\u5f0f\u5c31\u7528\u6307\u9488\uff0c \u987a\u5e8f\u5b58\u50a8\u7684\u65b9\u5f0f\u5c31\u662f\u7528\u6570\u7ec4\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u987e\u540d\u601d\u4e49\u5c31\u662f\u987a\u5e8f\u5b58\u50a8\u7684\u5143\u7d20\u5728\u5185\u5b58\u662f\u8fde\u7eed\u5206\u5e03\u7684\uff0c\u800c\u94fe\u5f0f\u5b58\u50a8\u5219\u662f\u901a\u8fc7\u6307\u9488\u628a\u5206\u5e03\u5728\u5404\u4e2a\u5730\u5740\u7684\u8282\u70b9\u4e32\u8054\u4e00\u8d77\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u94fe\u5f0f\u5b58\u50a8\u5982\u56fe\uff1a"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.img,{alt:"img",src:n(98414).A+"",width:"1352",height:"864"})}),"\n",(0,l.jsx)(r.p,{children:"\u987a\u5e8f\u5b58\u50a8\uff08\u7528\u6570\u7ec4\u6765\u5b58\u50a8\u4e8c\u53c9\u6811\uff09\u7684\u65b9\u5f0f\u5982\u56fe\uff1a"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.img,{alt:"img",src:n(67633).A+"",width:"954",height:"842"})}),"\n",(0,l.jsx)(r.p,{children:"\u7528\u6570\u7ec4\u6765\u5b58\u50a8\u4e8c\u53c9\u6811\u5982\u4f55\u904d\u5386\u7684\u5462\uff1f"}),"\n",(0,l.jsxs)(r.p,{children:["\u5982\u679c\u7236\u8282\u70b9\u7684\u6570\u7ec4\u4e0b\u6807\u662f i\uff0c\u90a3\u4e48\u5b83\u7684\u5de6\u5b69\u5b50\u5c31\u662f ",(0,l.jsx)(r.span,{className:"katex",children:(0,l.jsxs)(r.span,{className:"katex-html","aria-hidden":"true",children:[(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"0.6595em"}}),(0,l.jsx)(r.span,{className:"mord mathnormal",children:"i"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.jsx)(r.span,{className:"mbin",children:"\u2217"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,l.jsx)(r.span,{className:"mord",children:"2"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.jsx)(r.span,{className:"mbin",children:"+"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"0.6444em"}}),(0,l.jsx)(r.span,{className:"mord",children:"1"})]})]})}),"\uff0c\u53f3\u5b69\u5b50\u5c31\u662f ",(0,l.jsx)(r.span,{className:"katex",children:(0,l.jsxs)(r.span,{className:"katex-html","aria-hidden":"true",children:[(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"0.6595em"}}),(0,l.jsx)(r.span,{className:"mord mathnormal",children:"i"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.jsx)(r.span,{className:"mbin",children:"\u2217"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,l.jsx)(r.span,{className:"mord",children:"2"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,l.jsx)(r.span,{className:"mbin",children:"+"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"0.6444em"}}),(0,l.jsx)(r.span,{className:"mord",children:"2"})]})]})}),"\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u4f46\u662f\u7528\u94fe\u5f0f\u8868\u793a\u7684\u4e8c\u53c9\u6811\uff0c\u66f4\u6709\u5229\u4e8e\u6211\u4eec\u7406\u89e3\uff0c\u6240\u4ee5\u4e00\u822c\u6211\u4eec\u90fd\u662f\u7528\u94fe\u5f0f\u5b58\u50a8\u4e8c\u53c9\u6811\u3002"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"\u6240\u4ee5\u5927\u5bb6\u8981\u4e86\u89e3\uff0c\u7528\u6570\u7ec4\u4f9d\u7136\u53ef\u4ee5\u8868\u793a\u4e8c\u53c9\u6811\u3002"})}),"\n",(0,l.jsx)(r.h3,{id:"\u4e8c\u53c9\u6811\u7684\u904d\u5386\u65b9\u5f0f",children:"\u4e8c\u53c9\u6811\u7684\u904d\u5386\u65b9\u5f0f"}),"\n",(0,l.jsx)(r.p,{children:"\u4e3b\u8981\u6709\u4e24\u79cd\u904d\u5386\u65b9\u5f0f\uff1a"}),"\n",(0,l.jsxs)(r.ol,{children:["\n",(0,l.jsx)(r.li,{children:"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff1a\u5148\u5f80\u6df1\u8d70\uff0c\u9047\u5230\u53f6\u5b50\u8282\u70b9\u518d\u5f80\u56de\u8d70\u3002"}),"\n",(0,l.jsx)(r.li,{children:"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff1a\u4e00\u5c42\u4e00\u5c42\u7684\u53bb\u904d\u5386\u3002"}),"\n"]}),"\n",(0,l.jsxs)(r.p,{children:["\u8fd9\u4e24\u79cd\u904d\u5386\u662f",(0,l.jsx)(r.strong,{children:"\u56fe\u8bba"}),"\u4e2d\u6700\u57fa\u672c\u7684\u4e24\u79cd\u904d\u5386\u65b9\u5f0f\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u90a3\u4e48\u4ece\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u548c\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u8fdb\u4e00\u6b65\u62d3\u5c55\uff0c\u624d\u6709\u5982\u4e0b\u904d\u5386\u65b9\u5f0f\uff1a"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["\u6df1\u5ea6\u4f18\u5148\u904d\u5386\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"\u524d\u5e8f\u904d\u5386\uff08\u9012\u5f52\u6cd5\uff0c\u8fed\u4ee3\u6cd5\uff09"}),"\n",(0,l.jsx)(r.li,{children:"\u4e2d\u5e8f\u904d\u5386\uff08\u9012\u5f52\u6cd5\uff0c\u8fed\u4ee3\u6cd5\uff09"}),"\n",(0,l.jsx)(r.li,{children:"\u540e\u5e8f\u904d\u5386\uff08\u9012\u5f52\u6cd5\uff0c\u8fed\u4ee3\u6cd5\uff09"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(r.li,{children:["\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"\u5c42\u6b21\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(r.p,{children:["\u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u4e2d\uff1a\u6709\u4e09\u4e2a\u987a\u5e8f\uff0c\u524d\u4e2d\u540e\u5e8f\u904d\u5386\uff0c\u8fd9\u91cc\u524d\u4e2d\u540e\uff0c\u5176\u5b9e\u6307\u7684\u5c31\u662f",(0,l.jsx)(r.strong,{children:"\u4e2d\u95f4\u8282\u70b9\u7684\u904d\u5386\u987a\u5e8f"}),"\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u770b\u5982\u4e0b\u4e2d\u95f4\u8282\u70b9\u7684\u987a\u5e8f\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e2d\u95f4\u8282\u70b9\u7684\u987a\u5e8f\u5c31\u662f\u6240\u8c13\u7684\u904d\u5386\u65b9\u5f0f"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"\u524d\u5e8f\u904d\u5386\uff1a\u4e2d\u5de6\u53f3"}),"\n",(0,l.jsx)(r.li,{children:"\u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\u4e2d\u53f3"}),"\n",(0,l.jsx)(r.li,{children:"\u540e\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u4e2d"}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.img,{alt:"img",src:n(48182).A+"",width:"1352",height:"490"})}),"\n",(0,l.jsx)(r.p,{children:"\u6df1\u5ea6\u4f18\u5148\u548c\u5e7f\u5ea6\u4f18\u5148\u7684\u904d\u5386\u65b9\u5f0f\uff1a"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["\u4e8c\u53c9\u6811\u76f8\u5173\u9898\u76ee\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u4e5f\u5c31\u662f\u5b9e\u73b0\u524d\u4e2d\u540e\u5e8f\u904d\u5386\uff0c\u4f7f\u7528\u9012\u5f52\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\u3002",(0,l.jsx)(r.strong,{children:"\u4e4b\u524d\u8bf4\u8fc7\u6808\u5176\u5b9e\u5c31\u662f\u9012\u5f52\u7684\u4e00\u79cd\u5b9e\u73b0\u7ed3\u6784"}),"\uff0c\u4e5f\u5c31\u8bf4\u524d\u4e2d\u540e\u5e8f\u904d\u5386\u7684\u903b\u8f91\u5176\u5b9e\u90fd\u662f\u53ef\u4ee5\u501f\u52a9\u6808\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\u3002"]}),"\n",(0,l.jsx)(r.li,{children:"\u800c\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u7684\u5b9e\u73b0\u4e00\u822c\u4f7f\u7528\u961f\u5217\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e5f\u662f\u961f\u5217\u5148\u8fdb\u5148\u51fa\u7684\u7279\u70b9\u6240\u51b3\u5b9a\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u5148\u8fdb\u5148\u51fa\u7684\u7ed3\u6784\uff0c\u624d\u80fd\u4e00\u5c42\u4e00\u5c42\u7684\u6765\u904d\u5386\u4e8c\u53c9\u6811\u3002"}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49",children:"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49"}),"\n",(0,l.jsx)(r.p,{children:"\u94fe\u5f0f\u5b58\u50a8\u7684\u4e8c\u53c9\u6811\u8282\u70b9\u7684\u5b9a\u4e49\u65b9\u5f0f\u3002"}),"\n",(0,l.jsx)(r.p,{children:"C++\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-cpp",children:"struct TreeNode {\r\n    int val;\r\n    TreeNode *left;\r\n    TreeNode *right;\r\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n};\n"})}),"\n",(0,l.jsx)(r.p,{children:"java \u4ee3\u7801\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"public class TreeNode {\r\n    int val;\r\n    TreeNode left;\r\n    TreeNode right;\r\n\r\n    TreeNode() {}\r\n    TreeNode(int val) { this.val = val; }\r\n    TreeNode(int val, TreeNode left, TreeNode right) {\r\n        this.val = val;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.p,{children:"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\u548c\u94fe\u8868\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u76f8\u5bf9\u4e8e\u94fe\u8868 \uff0c\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u91cc\u591a\u4e86\u4e00\u4e2a\u6307\u9488\uff0c \u6709\u4e24\u4e2a\u6307\u9488\uff0c\u6307\u5411\u5de6\u53f3\u5b69\u5b50\u3002"}),"\n",(0,l.jsx)(r.h2,{id:"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386",children:"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/binary-tree-preorder-traversal/",children:"144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386"})}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/binary-tree-inorder-traversal/",children:"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386"})}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/binary-tree-postorder-traversal/",children:"145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386"})}),"\n",(0,l.jsxs)(r.p,{children:["\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 ",(0,l.jsx)(r.code,{children:"root"})," \uff0c\u8fd4\u56de\u5b83\u8282\u70b9\u503c\u7684 ",(0,l.jsx)(r.strong,{children:"\u524d\u5e8f\u3001\u4e2d\u5e8f\u548c\u540e\u5e8f"})," \u904d\u5386\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u524d\u5e8f\u904d\u5386\r\nclass Solution {\r\n    public List<Integer> preorderTraversal(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        preorder(root, res);\r\n        return res;\r\n    }\r\n    public void preorder(TreeNode root, List<Integer> result) {\r\n        if(root == null) return;\r\n        result.add(root.val);\r\n        preorder(root.left, result);\r\n        preorder(root.right, result);\r\n    }\r\n}\r\n\r\n//\u4e2d\u5e8f\u904d\u5386\r\nclass Solution {\r\n    public List<Integer> inorderTraversal(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        inorder(root, res);\r\n        return res;\r\n    }\r\n    public void inorder(TreeNode root, List<Integer> result){\r\n        if(root == null) return;\r\n        inorder(root.left, result);\r\n        result.add(root.val);\r\n        inorder(root.right, result);\r\n    }\r\n}\r\n\r\n//\u540e\u5e8f\u904d\u5386\r\nclass Solution {\r\n    public List<Integer> postorderTraversal(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        postorder(root, res);\r\n        return res;\r\n    }\r\n    public void postorder(TreeNode root, List<Integer> result){\r\n        if(root == null) return;\r\n        postorder(root.left, result);\r\n        postorder(root.right, result);\r\n        result.add(root.val);\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"\u4e8c\u53c9\u6811\u7684\u8fed\u4ee3\u904d\u5386",children:"\u4e8c\u53c9\u6811\u7684\u8fed\u4ee3\u904d\u5386"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u8fed\u4ee3\u524d\u5e8f\u904d\u5386\r\nclass Solution {\r\n    public List<Integer> preorderTraversal(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        if(root == null) return res;\r\n        deque.addFirst(root);\r\n        while(!deque.isEmpty()){\r\n            TreeNode temp = deque.poll();\r\n            if(temp.right != null) deque.addFirst(temp.right);\r\n            if(temp.left != null) deque.addFirst(temp.left);\r\n            res.add(temp.val);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\n//\u8fed\u4ee3\u540e\u5e8f\u5faa\u73af\u904d\u5386\r\nclass Solution {\r\n    public List<Integer> postorderTraversal(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        if(root == null) return res;\r\n        deque.addFirst(root);\r\n        while(!deque.isEmpty()){\r\n            TreeNode temp = deque.poll();\r\n            if(temp.left != null) deque.addFirst(temp.left);\r\n            if(temp.right != null) deque.addFirst(temp.right);\r\n            res.add(temp.val);\r\n        }\r\n        Collections.reverse(res);//\u7ffb\u8f6c\r\n        return res;\r\n    }\r\n}\r\n\r\n//\u8fed\u4ee3\u4e2d\u5e8f\u904d\u5386\r\nclass Solution {\r\n    public List<Integer> inorderTraversal(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        if(root == null) return res;\r\n        deque.addFirst(root);\r\n\r\n        while(!deque.isEmpty()){\r\n            TreeNode temp = deque.peek();\r\n            while(temp.left != null){\r\n                deque.addFirst(temp.left);\r\n                temp = temp.left;\r\n            }\r\n            while(deque.peek().right == null){\r\n                res.add(deque.poll().val);\r\n                if(deque.peek() == null) return res;\r\n            }\r\n\r\n            res.add(deque.peek().val);\r\n            deque.addFirst(deque.poll().right);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\n\n"})}),"\n",(0,l.jsx)(r.h2,{id:"\u7edf\u4e00\u8fed\u4ee3\u6cd5",children:"\u7edf\u4e00\u8fed\u4ee3\u6cd5"}),"\n",(0,l.jsx)(r.p,{children:"\u5c06\u8bbf\u95ee\u7684\u8282\u70b9\u653e\u5165\u6808\u4e2d\uff0c\u628a\u8981\u5904\u7406\u7684\u8282\u70b9\u4e5f\u653e\u5165\u6808\u4e2d\u4f46\u662f\u8981\u505a\u6807\u8bb0\u3002\u5c31\u662f\u8981\u5904\u7406\u7684\u8282\u70b9\u653e\u5165\u6808\u4e4b\u540e\uff0c\u7d27\u63a5\u7740\u653e\u5165\u4e00\u4e2a\u7a7a\u6307\u9488\u4f5c\u4e3a\u6807\u8bb0\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u524d\u5e8f\u904d\u5386\r\nclass Solution {\r\n    public List<Integer> preorderTraversal(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        if(root == null) return res;\r\n        deque.addFirst(root);\r\n\r\n        while(!deque.isEmpty()){\r\n            TreeNode node = deque.peek();\r\n            res.add(deque.poll().val);\r\n            if(node.right != null){\r\n                deque.addFirst(node.right);\r\n            }\r\n            if(node.left != null){\r\n                deque.addFirst(node.left);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\n//\u4e2d\u5e8f\u904d\u5386\r\nclass Solution {\r\n    public List<Integer> inorderTraversal(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        if(root == null) return res;\r\n        deque.addFirst(root);\r\n\r\n        while(!deque.isEmpty()){\r\n            TreeNode node = deque.peek();\r\n            if(node != null){\r\n                deque.poll();\r\n                if(node.right != null){\r\n                    deque.addFirst(node.right);\r\n                }\r\n                deque.addFirst(node);\r\n                deque.addFirst(null);\r\n                if(node.left != null){\r\n                    deque.addFirst(node.left);\r\n                }\r\n            } else{\r\n                deque.poll();\r\n                if(deque.peek() != null) res.add(deque.poll().val);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\n//\u540e\u5e8f\u904d\u5386\r\nclass Solution {\r\n    public List<Integer> postorderTraversal(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        if(root == null) return res;\r\n        deque.addFirst(root);\r\n\r\n        while(!deque.isEmpty()){\r\n            TreeNode node = deque.peek();\r\n            if(node != null){\r\n                deque.addFirst(null);\r\n                if(node.right != null){\r\n                    deque.addFirst(node.right);\r\n                }\r\n                if(node.left != null){\r\n                    deque.addFirst(node.left);\r\n                }\r\n\r\n            } else{\r\n                deque.poll();\r\n                if(deque.peek() != null) res.add(deque.poll().val);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"\u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386",children:"\u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386"}),"\n",(0,l.jsx)(r.h3,{id:"102\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",children:"102.\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/binary-tree-level-order-traversal/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u6309 \u5c42\u5e8f\u904d\u5386 \u5f97\u5230\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public List<List<Integer>> resList = new ArrayList<List<Integer>>();\r\n\r\n    public List<List<Integer>> levelOrder(TreeNode root) {\r\n        checknode(root, 0);\r\n        // checknode1(root);\r\n        return resList;\r\n    }\r\n    //BFS \u9012\u5f52\r\n    private void checknode(TreeNode node, int deep){\r\n        if(node == null) return;\r\n        deep++;\r\n        if(resList.size() < deep){\r\n            List<Integer> temp = new ArrayList<>();\r\n            resList.add(temp);\r\n        }\r\n        resList.get(deep-1).add(node.val);\r\n        checknode(node.left, deep);\r\n        checknode(node.right, deep);\r\n    }\r\n\r\n    //BFS \u8fed\u4ee3\r\n    private void checknode1(TreeNode node){\r\n        if(node == null) return;\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        deque.offer(node);\r\n\r\n        while(!deque.isEmpty()){\r\n            int len = deque.size();\r\n            List<Integer> temp = new ArrayList<>();\r\n            while(len > 0){\r\n                if(deque.peek().left != null) deque.offer(deque.peek().left);\r\n                if(deque.peek().right != null) deque.offer(deque.peek().right);\r\n                len--;\r\n                temp.add(deque.poll().val);\r\n            }\r\n            resList.add(temp);\r\n        }\r\n\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"107\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386-ii",children:"107.\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386 II"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u81ea\u5e95\u5411\u4e0a\u7684\u5c42\u6b21\u904d\u5386\u3002 \uff08\u5373\u6309\u4ece\u53f6\u5b50\u8282\u70b9\u6240\u5728\u5c42\u5230\u6839\u8282\u70b9\u6240\u5728\u7684\u5c42\uff0c\u9010\u5c42\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff09"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    List<List<Integer>> resList = new ArrayList<>();\r\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\r\n        // checknode(root, 0);\r\n        // List<List<Integer>> res = new ArrayList<>();\r\n        // for(int i = resList.size()-1; i >= 0; i--){\r\n        //     res.add(resList.get(i));\r\n        // }\r\n        checknode1(root);\r\n        return resList;\r\n    }\r\n    //\u9012\u5f52\r\n    private void checknode(TreeNode node, int deep){\r\n        if(node == null) return;\r\n        deep++;\r\n        if(resList.size() < deep){\r\n            List<Integer> temp = new ArrayList<>();\r\n            resList.add(temp);\r\n        }\r\n        resList.get(deep-1).add(node.val);\r\n        checknode(node.left, deep);\r\n        checknode(node.right, deep);\r\n    }\r\n    //\u8fed\u4ee3\r\n    private void checknode1(TreeNode node){\r\n        if(node == null) return;\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        deque.offer(node);\r\n\r\n        while(!deque.isEmpty()){\r\n            int len = deque.size();\r\n            List<Integer> temp = new ArrayList<>();\r\n            while(len > 0){\r\n                if(deque.peek().left != null) deque.offer(deque.peek().left);\r\n                if(deque.peek().right != null) deque.offer(deque.peek().right);\r\n                len--;\r\n                temp.add(deque.poll().val);\r\n            }\r\n            resList.addFirst(temp);//\u65b0\u904d\u5386\u5230\u7684\u5c42\u63d2\u5230\u5934\u90e8, \u8fd9\u6837\u5c31\u6ee1\u8db3\u6309\u7167\u5c42\u6b21\u53cd\u5e8f\u7684\u8981\u6c42\r\n        }\r\n\r\n    }\r\n}\r\n\n"})}),"\n",(0,l.jsx)(r.p,{children:"199.\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/binary-tree-right-side-view/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u60f3\u8c61\u81ea\u5df1\u7ad9\u5728\u5b83\u7684\u53f3\u4fa7\uff0c\u6309\u7167\u4ece\u9876\u90e8\u5230\u5e95\u90e8\u7684\u987a\u5e8f\uff0c\u8fd4\u56de\u4ece\u53f3\u4fa7\u6240\u80fd\u770b\u5230\u7684\u8282\u70b9\u503c\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public List<Integer> rightSideView(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        if(root == null) return res;\r\n        deque.offer(root);\r\n        int deep = 0;\r\n        while(!deque.isEmpty()){\r\n            int len = deque.size();\r\n            res.add(deque.peekLast().val);\r\n            while(len > 0){\r\n                len--;\r\n                if(deque.peek().left != null) deque.offer(deque.peek().left);\r\n                if(deque.peek().right != null) deque.offer(deque.peek().right);\r\n                deque.poll();\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"637\u4e8c\u53c9\u6811\u7684\u5c42\u5e73\u5747\u503c",children:"637.\u4e8c\u53c9\u6811\u7684\u5c42\u5e73\u5747\u503c"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/average-of-levels-in-binary-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e8c\u53c9\u6811, \u8fd4\u56de\u4e00\u4e2a\u7531\u6bcf\u5c42\u8282\u70b9\u5e73\u5747\u503c\u7ec4\u6210\u7684\u6570\u7ec4\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public List<Double> averageOfLevels(TreeNode root) {\r\n        List<Double> res = new ArrayList<>();\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        if(root == null) return res;\r\n        deque.offer(root);\r\n        int deep = 0;\r\n        double sum = (double)root.val;\r\n        while(!deque.isEmpty()){\r\n            int len = deque.size();\r\n            res.add(sum/len);\r\n            sum = 0;\r\n            while(len > 0){\r\n                len--;\r\n                if(deque.peek().left != null){\r\n                    deque.offer(deque.peek().left);\r\n                    sum += deque.peek().left.val;\r\n                }\r\n                if(deque.peek().right != null){\r\n                    deque.offer(deque.peek().right);\r\n                    sum += deque.peek().right.val;\r\n                }\r\n                deque.poll();\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"429n-\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",children:"429.N \u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/n-ary-tree-level-order-traversal/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a N \u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684\u5c42\u5e8f\u904d\u5386\u3002 (\u5373\u4ece\u5de6\u5230\u53f3\uff0c\u9010\u5c42\u904d\u5386)\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"\r\nclass Solution {\r\n    public List<List<Integer>> resList = new ArrayList<List<Integer>>();\r\n    public List<List<Integer>> levelOrder(Node root) {\r\n        checknode(root, 0);\r\n        // checknode1(root);//\u8fed\u4ee3\u7684\u5199\u6cd5\u7c7b\u4f3c\r\n        return resList;\r\n    }\r\n    //BFS \u9012\u5f52\r\n    private void checknode(Node node, int deep){\r\n        if(node == null) return;\r\n        deep++;\r\n        if(resList.size() < deep){\r\n            List<Integer> temp = new ArrayList<>();\r\n            resList.add(temp);\r\n        }\r\n        resList.get(deep-1).add(node.val);\r\n        for(Node a : node.children){\r\n            checknode(a, deep);\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"515\u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c",children:"515.\u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/find-largest-value-in-each-tree-row/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u60a8\u9700\u8981\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u4e2d\u627e\u5230\u6700\u5927\u7684\u503c\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public List<Integer> largestValues(TreeNode root) {\r\n        List<Integer> res = new ArrayList<>();\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        if(root == null) return res;\r\n        deque.offer(root);\r\n        int max_num = root.val;\r\n        while(!deque.isEmpty()){\r\n            int len = deque.size();\r\n            res.add(max_num);\r\n            max_num = Integer.MIN_VALUE;\r\n            while(len > 0){\r\n                len--;\r\n                if(deque.peek().left != null){\r\n                    deque.offer(deque.peek().left);\r\n                    max_num = max_num > deque.peek().left.val ? max_num : deque.peek().left.val;\r\n                }\r\n                if(deque.peek().right != null){\r\n                    deque.offer(deque.peek().right);\r\n                    max_num = max_num > deque.peek().right.val ? max_num : deque.peek().right.val;\r\n                }\r\n                deque.poll();\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"116\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488",children:"116.\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u5176\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\uff0c\u6bcf\u4e2a\u7236\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u8ba9\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u3002\u5982\u679c\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5219\u5c06 next \u6307\u9488\u8bbe\u7f6e\u4e3a NULL\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6240\u6709 next \u6307\u9488\u90fd\u88ab\u8bbe\u7f6e\u4e3a NULL\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"\r\nclass Solution {\r\n    public Node connect(Node root) {\r\n        Deque<Node> deque = new LinkedList<>();\r\n        if(root == null) return root;\r\n        deque.offer(root);\r\n        while(!deque.isEmpty()){\r\n            int len = deque.size();\r\n            Node cur = deque.poll();\r\n            if(cur.left != null) deque.offer(cur.left);\r\n            if(cur.right != null) deque.offer(cur.right);\r\n            len--;\r\n            while(len > 0){\r\n                len--;\r\n                Node next = deque.poll();\r\n                if(next.left != null) deque.offer(next.left);\r\n                if(next.right != null) deque.offer(next.right);\r\n\r\n                cur.next = next;\r\n                cur = next;\r\n            }\r\n            cur.next = null;\r\n        }\r\n        return root;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"117\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488-ii",children:"117.\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 II"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\u548c\u4e0a\u4e00\u9898\u4e00\u6837"}),"\n",(0,l.jsx)(r.h3,{id:"104\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",children:"104.\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u4e2d\u524d\u540e\u662f\u6c42\u9ad8\u5ea6\u7684\u903b\u8f91\uff0c\u524d\u540e\u4e2d\u662f\u6c42\u6df1\u5ea6\u7684\u903b\u8f91"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"\r\n//\u9012\u5f52\r\nclass Solution {\r\n    public int maxDepth(TreeNode root) {\r\n        if(root == null) return 0;\r\n        return Math.max(maxDepth(root.left), maxDepth(root.right)); + 1;\r\n    }\r\n}\r\n//\u9012\u5f52\u6cd5(\u6c42\u6df1\u5ea6\u6cd5)\r\nclass Solution {\r\n    public int res = 0;\r\n    public int maxDepth(TreeNode root) {\r\n        if(root == null) return 0;\r\n        ans(root, 0);\r\n        return res;\r\n    }\r\n    private void ans(TreeNode node, int temp){\r\n        if(node == null) return;\r\n        temp++;\r\n        if(res < temp) res = temp;\r\n        ans(node.left, temp);\r\n        ans(node.right, temp);\r\n\r\n    }\r\n}\r\n\r\n//\u6df1\u5ea6\u56de\u6eaf\r\nclass Solution {\r\n    public int res = 0;\r\n    public int maxDepth(TreeNode root) {\r\n        if(root == null) return 0;\r\n        ans(root, 1);\r\n        return res;\r\n    }\r\n    private void ans(TreeNode node, int temp){\r\n        res = res > temp ? res : temp;\r\n        if(node.left == null && node.right == null) return;\r\n        if(node.left != null) ans(node.left, temp+1);\r\n\r\n        if(node.right != null) ans(node.right, temp+1);\r\n\r\n    }\r\n}\r\n\r\n//\u8fed\u4ee3\r\nclass Solution {\r\n    public int maxDepth(TreeNode root) {\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        int res = 0;\r\n        if(root == null) return res;\r\n        deque.offer(root);\r\n        while(!deque.isEmpty()){\r\n            int len = deque.size();\r\n\r\n            while(len > 0){\r\n                len--;\r\n                TreeNode temp = deque.poll();\r\n                if(temp.left != null) deque.offer(temp.left);\r\n                if(temp.right != null) deque.offer(temp.right);\r\n            }\r\n            res++;\r\n        }\r\n        return res;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"111\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",children:"111.\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53ea\u6709\u5f53\u5de6\u53f3\u5b69\u5b50\u90fd\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u624d\u8bf4\u660e\u904d\u5386\u7684\u6700\u4f4e\u70b9\u4e86\u3002\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u5b69\u5b50\u4e3a\u7a7a\u5219\u4e0d\u662f\u6700\u4f4e\u70b9"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f52\r\nclass Solution {\r\n    public int minDepth(TreeNode root) {\r\n        if(root == null) return 0;\r\n        if(root.left == null && root.right == null) return 1;\r\n        if(root.left != null && root.right != null) return 1 + Math.min(minDepth(root.left),minDepth(root.right));\r\n        else if(root.left == null) return 1 + minDepth(root.right);\r\n        else return 1 + minDepth(root.left);\r\n    }\r\n}\r\n\r\n//\u8fed\u4ee3\r\nclass Solution {\r\n    public int minDepth(TreeNode root) {\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        int res = 0;\r\n        if(root == null) return res;\r\n        deque.offer(root);\r\n        res++;\r\n        while(!deque.isEmpty()){\r\n            int len = deque.size();\r\n            while(len > 0){\r\n                len--;\r\n                TreeNode temp = deque.poll();\r\n                if(temp.left != null) deque.offer(temp.left);\r\n                if(temp.right != null) deque.offer(temp.right);\r\n                if(temp.left != null || temp.right != null){}\r\n                else return res;\r\n            }\r\n            res++;\r\n        }\r\n        return res;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"226\u7ffb\u8f6c\u4e8c\u53c9\u6811",children:"226.\u7ffb\u8f6c\u4e8c\u53c9\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/invert-binary-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f52\r\n/**\r\n     * \u524d\u540e\u5e8f\u904d\u5386\u90fd\u53ef\u4ee5\r\n     * \u4e2d\u5e8f\u4e0d\u884c\uff0c\u56e0\u4e3a\u5148\u5de6\u5b69\u5b50\u4ea4\u6362\u5b69\u5b50\uff0c\u518d\u6839\u4ea4\u6362\u5b69\u5b50\uff08\u505a\u5b8c\u540e\uff0c\u53f3\u5b69\u5b50\u5df2\u7ecf\u53d8\u6210\u4e86\u539f\u6765\u7684\u5de6\u5b69\u5b50\uff09\uff0c\u518d\u53f3\u5b69\u5b50\u4ea4\u6362\u5b69\u5b50\uff08\u6b64\u65f6\u5176\u5b9e\u662f\u5bf9\u539f\u6765\u7684\u5de6\u5b69\u5b50\u505a\u4ea4\u6362\uff09\r\n     */\r\nclass Solution {\r\n    public TreeNode invertTree(TreeNode root) {\r\n        if(root == null) return root;\r\n        invertTree(root.left);\r\n        invertTree(root.right);\r\n        swapChildren(root);\r\n        return root;\r\n    }\r\n\r\n    private void swapChildren(TreeNode root) {\r\n        TreeNode tmp = root.left;\r\n        root.left = root.right;\r\n        root.right = tmp;\r\n    }\r\n}\r\n\r\n//\u8fed\u4ee3\r\nclass Solution {\r\n    public TreeNode invertTree(TreeNode root) {\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        if(root == null) return root;\r\n        deque.push(root);\r\n\r\n        while(!deque.isEmpty()){\r\n            int len = deque.size();\r\n            while(len-- > 0){\r\n                TreeNode temp = deque.pop();\r\n                swapChildren(temp);\r\n                if(temp.left != null) deque.offer(temp.left);\r\n                if(temp.right != null) deque.offer(temp.right);\r\n            }\r\n        }\r\n        return root;\r\n    }\r\n\r\n    private void swapChildren(TreeNode root) {\r\n        TreeNode tmp = root.left;\r\n        root.left = root.right;\r\n        root.right = tmp;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"101-\u5bf9\u79f0\u4e8c\u53c9\u6811",children:"101. \u5bf9\u79f0\u4e8c\u53c9\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/symmetric-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f52\r\nclass Solution {\r\n    public boolean isSymmetric(TreeNode root) {\r\n        if (root == null) return true;\r\n        return checknode(root.left, root.right);\r\n    }\r\n    private boolean checknode(TreeNode node1, TreeNode node2){\r\n        if(node1 != null && node2 != null){\r\n            return node1.val == node2.val && checknode(node1.left, node2.right) && checknode(node1.right, node2.left);\r\n        }\r\n        else if(node1 == null && node2 == null) return true;\r\n        else return false;\r\n    }\r\n}\r\n\r\n//\u8fed\u4ee3\r\nclass Solution {\r\n    public boolean isSymmetric(TreeNode root) {\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        boolean res = false;\r\n        if(root == null) return res;\r\n        deque.offer(root.right);\r\n        deque.addFirst(root.left);\r\n        while(!deque.isEmpty()){\r\n            TreeNode leftnode = deque.poll();\r\n            TreeNode rightnode = deque.pollLast();\r\n            if(leftnode == null && rightnode == null) continue;\r\n            if(leftnode == null || rightnode == null || leftnode.val != rightnode.val) return false;\r\n            deque.addFirst(leftnode.left);\r\n            deque.addLast(rightnode.right);\r\n            deque.addFirst(leftnode.right);\r\n            deque.addLast(rightnode.left);\r\n        }\r\n        return true;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"\u7c7b\u4f3c\u9898\u76ee",children:"\u7c7b\u4f3c\u9898\u76ee"}),"\n",(0,l.jsx)(r.h4,{id:"100\u76f8\u540c\u7684\u6811",children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/same-tree/",children:"100.\u76f8\u540c\u7684\u6811"})}),"\n",(0,l.jsxs)(r.p,{children:["\u7ed9\u4f60\u4e24\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 ",(0,l.jsx)(r.code,{children:"p"})," \u548c ",(0,l.jsx)(r.code,{children:"q"})," \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u8fd9\u4e24\u68f5\u6811\u662f\u5426\u76f8\u540c\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public boolean isSameTree(TreeNode p, TreeNode q) {\r\n        return checknode(p, q);\r\n    }\r\n    private boolean checknode(TreeNode node1, TreeNode node2){\r\n        if(node1 != null && node2 != null){\r\n            return node1.val == node2.val && checknode(node1.left, node2.left) && checknode(node1.right, node2.right);\r\n        }\r\n        else if(node1 == null && node2 == null) return true;\r\n        else return false;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h4,{id:"572\u53e6\u4e00\u4e2a\u6811\u7684\u5b50\u6811",children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/subtree-of-another-tree/",children:"572.\u53e6\u4e00\u4e2a\u6811\u7684\u5b50\u6811"})}),"\n",(0,l.jsxs)(r.p,{children:["\u7ed9\u4f60\u4e24\u68f5\u4e8c\u53c9\u6811 ",(0,l.jsx)(r.code,{children:"root"})," \u548c ",(0,l.jsx)(r.code,{children:"subRoot"})," \u3002\u68c0\u9a8c ",(0,l.jsx)(r.code,{children:"root"})," \u4e2d\u662f\u5426\u5305\u542b\u548c ",(0,l.jsx)(r.code,{children:"subRoot"})," \u5177\u6709\u76f8\u540c\u7ed3\u6784\u548c\u8282\u70b9\u503c\u7684\u5b50\u6811\u3002\u5982\u679c\u5b58\u5728\uff0c\u8fd4\u56de ",(0,l.jsx)(r.code,{children:"true"})," \uff1b\u5426\u5219\uff0c\u8fd4\u56de ",(0,l.jsx)(r.code,{children:"false"})," \u3002"]}),"\n",(0,l.jsxs)(r.p,{children:["\u4e8c\u53c9\u6811 ",(0,l.jsx)(r.code,{children:"tree"})," \u7684\u4e00\u68f5\u5b50\u6811\u5305\u62ec ",(0,l.jsx)(r.code,{children:"tree"})," \u7684\u67d0\u4e2a\u8282\u70b9\u548c\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u540e\u4ee3\u8282\u70b9\u3002",(0,l.jsx)(r.code,{children:"tree"})," \u4e5f\u53ef\u4ee5\u770b\u505a\u5b83\u81ea\u8eab\u7684\u4e00\u68f5\u5b50\u6811\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//dfs\u9012\u5f52\r\nclass Solution {\r\n    public boolean isSubtree(TreeNode root, TreeNode subRoot) {\r\n        return dfs(root, subRoot);\r\n    }\r\n    private boolean dfs(TreeNode node1, TreeNode node2){\r\n        if(node1 == null || node2 == null) return false;\r\n\r\n        return checknode(node1, node2) || dfs(node1.left, node2) || dfs(node1.right, node2);\r\n    }\r\n    private boolean checknode(TreeNode node1, TreeNode node2){\r\n        if(node1 != null && node2 != null){\r\n            return node1.val == node2.val && checknode(node1.left, node2.left) && checknode(node1.right, node2.right);\r\n        }\r\n        else if(node1 == null && node2 == null) return true;\r\n        else return false;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"222\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570",children:"222.\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/count-complete-tree-nodes/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u51fa\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6c42\u51fa\u8be5\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u8fed\u4ee3\r\nclass Solution {\r\n    public int countNodes(TreeNode root) {\r\n        if(root == null) return 0;\r\n        return countNodes(root.left) + countNodes(root.right) + 1;\r\n    }\r\n}\r\n//\u6ee1\u4e8c\u53c9\u6811\r\nclass Solution {\r\n    /**\r\n     * \u9488\u5bf9\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u89e3\u6cd5\r\n     *\r\n     * \u6ee1\u4e8c\u53c9\u6811\u7684\u7ed3\u70b9\u6570\u4e3a\uff1a2^depth - 1\r\n     */\r\n    public int countNodes(TreeNode root) {\r\n        if (root == null) return 0;\r\n        TreeNode left = root.left;\r\n        TreeNode right = root.right;\r\n        int leftDepth = 0, rightDepth = 0; // \u8fd9\u91cc\u521d\u59cb\u4e3a0\u662f\u6709\u76ee\u7684\u7684\uff0c\u4e3a\u4e86\u4e0b\u9762\u6c42\u6307\u6570\u65b9\u4fbf\r\n        while (left != null) {  // \u6c42\u5de6\u5b50\u6811\u6df1\u5ea6\r\n            left = left.left;\r\n            leftDepth++;\r\n        }\r\n        while (right != null) { // \u6c42\u53f3\u5b50\u6811\u6df1\u5ea6\r\n            right = right.right;\r\n            rightDepth++;\r\n        }\r\n        if (leftDepth == rightDepth) {\r\n            return (2 << leftDepth) - 1; // \u6ce8\u610f(2<<1) \u76f8\u5f53\u4e8e2^2\uff0c\u6240\u4ee5leftDepth\u521d\u59cb\u4e3a0\r\n        }\r\n        return countNodes(root.left) + countNodes(root.right) + 1;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"110\u5e73\u8861\u4e8c\u53c9\u6811",children:"110.\u5e73\u8861\u4e8c\u53c9\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/balanced-binary-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a\u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f521\r\nclass Solution {\r\n    public boolean isBalanced(TreeNode root) {\r\n        if(root == null) return true;\r\n        return compare(root.left, root.right);\r\n    }\r\n    private boolean compare(TreeNode node1, TreeNode node2){\r\n        if(node1 == null && node2 == null) return true;\r\n        if(Math.abs(getHight(node1) - getHight(node2)) > 1) return false;\r\n        if(node1 == null || node2 == null) return true;\r\n        return compare(node1.left, node1.right) && compare(node2.left, node2.right);\r\n    }\r\n    private int getHight(TreeNode node){\r\n        if(node == null) return 0;\r\n        return Math.max(getHight(node.left), getHight(node.right)) + 1;\r\n    }\r\n}\r\n\r\n\r\n//\u9012\u5f522\r\nclass Solution {\r\n    public boolean isBalanced(TreeNode root) {\r\n        if(root == null) return true;\r\n        return getHight(root) != -1;\r\n    }\r\n    private int getHight(TreeNode node){\r\n        if(node == null) return 0;\r\n        int lefthight = getHight(node.left);\r\n        if(lefthight == -1) return -1;\r\n        int righthight = getHight(node.right);\r\n        if(righthight == -1) return -1;\r\n        if(Math.abs(righthight - lefthight) > 1) return -1;\r\n\r\n        return Math.max(lefthight, righthight) + 1;\r\n    }\r\n}\r\n\n"})}),"\n",(0,l.jsx)(r.h2,{id:"257-\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84",children:"257. \u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/binary-tree-paths/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:'//\u9012\u5f521\r\nclass Solution {\r\n    public List<String> binaryTreePaths(TreeNode root) {\r\n        List<String> res = new ArrayList<>();\r\n        List<Integer> paths = new  ArrayList<>();\r\n        traversal(root, paths, res);\r\n        return res;\r\n    }\r\n    private void traversal(TreeNode node, List<Integer> paths, List<String> res){\r\n        paths.add(node.val);//\u524d\u5e8f\u904d\u5386\r\n        if(node.left == null && node.right == null){\r\n            StringBuilder sb = new StringBuilder();\r\n            for(int i = 0; i < paths.size() - 1; i++){\r\n                sb.append(paths.get(i)).append("->");\r\n            }\r\n            sb.append(paths.get(paths.size() - 1));\r\n            res.add(sb.toString());\r\n            return;\r\n        }\r\n        if(node.left != null){\r\n            traversal(node.left, paths, res);\r\n            paths.remove(paths.size() - 1);//\u56de\u6eaf\r\n        }\r\n        if(node.right != null){\r\n            traversal(node.right, paths, res);\r\n            paths.remove(paths.size() - 1);//\u56de\u6eaf\r\n        }\r\n    }\r\n}\r\n//\u9012\u5f522\r\nclass Solution {\r\n    public List<String> res = new ArrayList<>();\r\n    public List<String> binaryTreePaths(TreeNode root) {\r\n        deal(root, "");\r\n        return res;\r\n    }\r\n    private void deal(TreeNode node, String s){\r\n        if(node == null) return;\r\n        int num = node.val;\r\n        String temp = new String();\r\n        if(node.left == null && node.right == null){\r\n            res.add((new StringBuilder(s).append(num)).toString());\r\n            return;\r\n        }\r\n        if(node.left != null){\r\n            temp = (new StringBuilder(s).append(num).append("->")).toString();\r\n            deal(node.left, temp);\r\n        }\r\n        if(node.right != null){\r\n            temp = (new StringBuilder(s).append(num).append("->")).toString();\r\n            deal(node.right, temp);\r\n        }\r\n    }\r\n}\r\n//\u9012\u5f523\r\nclass Solution {\r\n    public List<String> binaryTreePaths(TreeNode root) {\r\n        List<String> res = new LinkedList<>();\r\n        if (root == null)\r\n            return res;\r\n        //\u5230\u8fbe\u53f6\u5b50\u8282\u70b9\uff0c\u628a\u8def\u5f84\u52a0\u5165\u5230\u96c6\u5408\u4e2d\r\n        if (root.left == null && root.right == null) {\r\n            res.add(root.val + "");\r\n            return res;\r\n        }\r\n        //\u904d\u5386\u5de6\u5b50\u8282\u70b9\u7684\u8def\u5f84\r\n        for (String path : binaryTreePaths(root.left)) {\r\n            res.add(root.val + "->" + path);\r\n        }\r\n        //\u904d\u5386\u53f3\u5b50\u8282\u70b9\u7684\u8def\u5f84\r\n        for (String path : binaryTreePaths(root.right)) {\r\n            res.add(root.val + "->" + path);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n //\u8fed\u4ee3\r\nclass Solution {\r\n    public List<String> binaryTreePaths(TreeNode root) {\r\n        List<String> res = new LinkedList<>();\r\n        if (root == null)\r\n            return res;\r\n        Stack<Object> stack = new Stack<>();\r\n        stack.push(root);\r\n        stack.push(root.val + "");\r\n        while(!stack.isEmpty()){\r\n            String paths = (String) stack.pop();\r\n            TreeNode node = (TreeNode) stack.pop();\r\n            if(node.left == null && node.right == null){\r\n                res.add(paths);\r\n            }\r\n            if(node.left != null){\r\n                stack.push(node.left);\r\n                stack.push(paths + "->" + node.left.val);\r\n            }\r\n            if(node.right != null){\r\n                stack.push(node.right);\r\n                stack.push(paths + "->" + node.right.val);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\n'})}),"\n",(0,l.jsx)(r.h2,{id:"404\u5de6\u53f6\u5b50\u4e4b\u548c",children:"404.\u5de6\u53f6\u5b50\u4e4b\u548c"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/sum-of-left-leaves/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u8ba1\u7b97\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6240\u6709\u5de6\u53f6\u5b50\u4e4b\u548c\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f52\r\nclass Solution {\r\n    public int sumOfLeftLeaves(TreeNode root) {\r\n        if(root == null) return 0;\r\n        int res = 0;\r\n        if(root.left != null && root.left.left == null && root.left.right == null) res += root.left.val;\r\n        return res + sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);\r\n    }\r\n}\r\n\r\n//\u8fed\u4ee3\r\nclass Solution {\r\n    public int sumOfLeftLeaves(TreeNode root) {\r\n        if(root == null) return 0;\r\n        int res = 0;\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        deque.offer(root);\r\n        while(!deque.isEmpty()){\r\n            TreeNode temp = deque.poll();\r\n            if(temp.left != null){\r\n                deque.offer(temp.left);\r\n                if(temp.left.left == null && temp.left.right == null) res += temp.left.val;\r\n            }\r\n            if(temp.right != null) deque.offer(temp.right);\r\n        }\r\n        return res;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"513\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c",children:"513.\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/find-bottom-left-tree-value/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5728\u6811\u7684\u6700\u540e\u4e00\u884c\u627e\u5230\u6700\u5de6\u8fb9\u7684\u503c\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f52\r\nclass Solution {\r\n    private int Deep = -1, Value = 0;\r\n    public int findBottomLeftValue(TreeNode root) {\r\n        if(root == null) return 0;\r\n        findLeftValue(root, 0);\r\n        return Value;\r\n    }\r\n    private void findLeftValue(TreeNode node, int depth){\r\n        if(node.left == null && node.left == null){\r\n            if(depth > Deep){\r\n                Deep = depth;\r\n                Value = node.val;\r\n            }\r\n        }\r\n        if(node.left != null) findLeftValue(node.left, depth + 1);\r\n        if(node.right != null) findLeftValue(node.right, depth + 1);\r\n    }\r\n}\r\n\r\n//\u8fed\u4ee3\r\nclass Solution {\r\n    public int findBottomLeftValue(TreeNode root) {\r\n        if(root == null) return 0;\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        deque.offer(root);\r\n        int res = 0;\r\n        while(!deque.isEmpty()){\r\n            int len =deque.size();\r\n            res = deque.peek().val;\r\n            for(;len > 0; len--){\r\n                TreeNode temp = deque.poll();\r\n                if(temp.left != null) deque.offer(temp.left);\r\n                if(temp.right != null) deque.offer(temp.right);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"112-\u8def\u5f84\u603b\u548c",children:"112. \u8def\u5f84\u603b\u548c"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/path-sum/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f52\r\nclass Solution {\r\n    public boolean hasPathSum(TreeNode root, int targetSum) {\r\n        if(root == null) return false;\r\n        int temp = root.val;\r\n        if(root.left == null && root.right == null) return temp == targetSum;\r\n        return hasPathSum(root.left, targetSum - temp) || hasPathSum(root.right, targetSum - temp);\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"\u7c7b\u4f3c\u9898",children:"\u7c7b\u4f3c\u9898"}),"\n",(0,l.jsxs)(r.ol,{start:"113",children:["\n",(0,l.jsx)(r.li,{children:"\u8def\u5f84\u603b\u548c ii"}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/path-sum-ii/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f52\r\nclass Solution {\r\n    private List<List<Integer>> res = new ArrayList<>();\r\n    private LinkedList<Integer> path = new LinkedList<>();\r\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\r\n        traserval(root, targetSum);\r\n        return res;\r\n    }\r\n    private void traserval(TreeNode node, int count){\r\n        if(node == null) return;\r\n        path.offer(node.val);\r\n        count -= node.val;\r\n        if(node.left ==null && node.right == null && count == 0){\r\n            res.add(new LinkedList<>(path));\r\n        }\r\n        traserval(node.left, count);\r\n        traserval(node.right,count);\r\n        path.removeLast();\r\n\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"106\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",children:"106.\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    private Map<Integer, Integer> map = new HashMap<>();\r\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\r\n        for(int i = 0; i < inorder.length; i++){\r\n            map.put(inorder[i], i);\r\n        }\r\n\r\n        return findNode(inorder, 0, inorder.length, postorder, 0, postorder.length);\r\n    }\r\n    private TreeNode findNode(int[] inorder, int inBegin, int inEnd, int[] postorder,int postBegin, int postEnd){\r\n        if(inBegin >= inEnd || postBegin >= postEnd){\r\n            return null;\r\n        }\r\n        int rootIndex = map.get(postorder[postEnd - 1]);\r\n        TreeNode root = new TreeNode(inorder[rootIndex]);\r\n        int lenOfLeft = rootIndex - inBegin;\r\n        root.left = findNode(inorder, inBegin, rootIndex, postorder, postBegin, postBegin + lenOfLeft);\r\n        root.right = findNode(inorder, rootIndex + 1, inEnd, postorder, postBegin + lenOfLeft, postEnd - 1);\r\n        return root;\r\n\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"\u7c7b\u4f3c\u9898-1",children:"\u7c7b\u4f3c\u9898"}),"\n",(0,l.jsx)(r.p,{children:"105.\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    private Map<Integer, Integer> map = new HashMap<>();\r\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\r\n        for(int i = 0; i < inorder.length; i++){\r\n            map.put(inorder[i], i);\r\n        }\r\n\r\n        return findNode(inorder, 0, inorder.length, preorder, 0, preorder.length);\r\n    }\r\n    private TreeNode findNode(int[] inorder, int inBegin, int inEnd, int[] preorder,int preBegin, int preEnd){\r\n        if(inBegin >= inEnd || preBegin >= preEnd){\r\n            return null;\r\n        }\r\n        int rootIndex = map.get(preorder[preBegin]);\r\n        TreeNode root = new TreeNode(inorder[rootIndex]);\r\n        int lenOfLeft = rootIndex - inBegin;\r\n        root.left = findNode(inorder, inBegin, rootIndex, preorder, preBegin + 1, preBegin + lenOfLeft + 1);\r\n        root.right = findNode(inorder, rootIndex + 1, inEnd, preorder, preBegin + lenOfLeft + 1, preEnd);\r\n        return root;\r\n\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"654\u6700\u5927\u4e8c\u53c9\u6811",children:"654.\u6700\u5927\u4e8c\u53c9\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/maximum-binary-tree/",children:"\u529b\u6263\u9898\u76ee\u5730\u5740"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\u3002\u4e00\u4e2a\u4ee5\u6b64\u6570\u7ec4\u6784\u5efa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"\u4e8c\u53c9\u6811\u7684\u6839\u662f\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u3002"}),"\n",(0,l.jsx)(r.li,{children:"\u5de6\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u5de6\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002"}),"\n",(0,l.jsx)(r.li,{children:"\u53f3\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u53f3\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002"}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:"\u901a\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u6784\u5efa\u6700\u5927\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u8f93\u51fa\u8fd9\u4e2a\u6811\u7684\u6839\u8282\u70b9\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f52\r\nclass Solution {\r\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\r\n        if(nums.length == 0) return null;\r\n        return construct(nums, 0, nums.length);\r\n    }\r\n    private TreeNode construct(int[] nums, int left, int right){\r\n        if(right <= left) return null;\r\n        int max_num = left;\r\n        for(int i = left+1; i < right; i++){\r\n            if(nums[max_num] < nums[i]) max_num = i;\r\n        }\r\n        TreeNode node = new TreeNode(nums[max_num]);\r\n        node.left = construct(nums, left, max_num);\r\n        node.right = construct(nums, max_num+1, right);\r\n        return node;\r\n    }\r\n}\r\n//\u8fed\u4ee3\r\nclass Solution {\r\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\r\n        if(nums == null && nums.length == 0) return null;\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        for(int i : nums){\r\n            TreeNode cur = new TreeNode(i);\r\n\r\n            while(!deque.isEmpty() && deque.peek().val < i){\r\n                TreeNode node = deque.pop();\r\n                if(deque.isEmpty()){\r\n                    cur.left = node;\r\n                } else {\r\n                    TreeNode top = deque.peek();\r\n                    if(top.val > i) cur.left = node;\r\n                }\r\n            }\r\n            if(!deque.isEmpty()) deque.peek().right = cur;\r\n            deque.push(cur);\r\n        }\r\n        while(deque.size() > 1) deque.pop();\r\n\r\n        return deque.pop();\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"617\u5408\u5e76\u4e8c\u53c9\u6811",children:"617.\u5408\u5e76\u4e8c\u53c9\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/merge-two-binary-trees/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u60f3\u8c61\u5f53\u4f60\u5c06\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u8986\u76d6\u5230\u53e6\u4e00\u4e2a\u4e0a\u65f6\uff0c\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u4e00\u4e9b\u8282\u70b9\u4fbf\u4f1a\u91cd\u53e0\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u4f60\u9700\u8981\u5c06\u4ed6\u4eec\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u4e8c\u53c9\u6811\u3002\u5408\u5e76\u7684\u89c4\u5219\u662f\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u91cd\u53e0\uff0c\u90a3\u4e48\u5c06\u4ed6\u4eec\u7684\u503c\u76f8\u52a0\u4f5c\u4e3a\u8282\u70b9\u5408\u5e76\u540e\u7684\u65b0\u503c\uff0c\u5426\u5219\u4e0d\u4e3a NULL \u7684\u8282\u70b9\u5c06\u76f4\u63a5\u4f5c\u4e3a\u65b0\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\r\n        if(root1 == null) return root2;\r\n        if(root2 == null) return root1;\r\n        TreeNode root = new TreeNode(root1.val + root2.val);\r\n        root.left = mergeTrees(root1.left, root2.left);\r\n        root.right = mergeTrees(root1.right, root2.right);\r\n        return root;\r\n\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"700\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22",children:"700.\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/search-in-a-binary-search-tree/",children:"\u529b\u6263\u9898\u76ee\u5730\u5740"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\u7684\u6839\u8282\u70b9\u548c\u4e00\u4e2a\u503c\u3002 \u4f60\u9700\u8981\u5728 BST \u4e2d\u627e\u5230\u8282\u70b9\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u8282\u70b9\u3002 \u8fd4\u56de\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u3002 \u5982\u679c\u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de NULL\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public TreeNode searchBST(TreeNode root, int val) {\r\n        if(root == null || root.val == val) return root;\r\n        TreeNode node = searchBST(root.left, val);\r\n        if(node != null) return node;\r\n        return searchBST(root.right, val);\r\n    }\r\n}\r\n\r\n//\u5229\u7528BST\u7684\u6027\u8d28\u4f18\u5316\r\nclass Solution {\r\n    public TreeNode searchBST(TreeNode root, int val) {\r\n        if(root == null || root.val == val) return root;\r\n        if(root.val > val) return searchBST(root.left, val);\r\n        else return searchBST(root.right, val);\r\n\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"98\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811",children:"98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/validate-binary-search-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"\u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002"}),"\n",(0,l.jsx)(r.li,{children:"\u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002"}),"\n",(0,l.jsx)(r.li,{children:"\u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002"}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public boolean isValidBST(TreeNode root) {\r\n        return checkNode(root, Long.MIN_VALUE, Long.MAX_VALUE);\r\n    }\r\n    private boolean checkNode(TreeNode node, long left, long right){\r\n        if(node == null) return true;\r\n        if(node.val >= right || node.val <= left) return false;\r\n        return checkNode(node.left, left, node.val) && checkNode(node.right, node.val, right);\r\n    }\r\n}\r\n\n"})}),"\n",(0,l.jsx)(r.h2,{id:"530\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee",children:"530.\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/minimum-absolute-difference-in-bst/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u4f60\u4e00\u68f5\u6240\u6709\u8282\u70b9\u4e3a\u975e\u8d1f\u503c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u4f60\u8ba1\u7b97\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u6700\u5c0f\u503c\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u4e2d\u5e8f\u9012\u5f52\r\nclass Solution {\r\n    private int res = Integer.MAX_VALUE;\r\n    private TreeNode pre;\r\n    public int getMinimumDifference(TreeNode root) {\r\n        if(root == null) return 0;\r\n        traversal(root);\r\n        return res;\r\n    }\r\n    private void traversal(TreeNode node){\r\n        if(node == null) return;\r\n        traversal(node.left);\r\n        if(pre != null) res = Math.min(res, node.val - pre.val);\r\n        pre = node;\r\n        traversal(node.right);\r\n    }\r\n}\r\n//\u4e2d\u5e8f\u8fed\u4ee3\r\nclass Solution {\r\n    public int getMinimumDifference(TreeNode root) {\r\n        if(root == null) return 0;\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        int res = Integer.MAX_VALUE;\r\n        TreeNode pre = null;\r\n        deque.push(root);\r\n        while(!deque.isEmpty()){\r\n            TreeNode cur = deque.pop();\r\n            if(cur != null){\r\n                if(cur.right != null) deque.push(cur.right);\r\n                deque.push(cur);\r\n                deque.push(null);\r\n                if(cur.left != null) deque.push(cur.left);\r\n            }\r\n            else{\r\n                TreeNode temp = deque.pop();\r\n                if(pre != null) res = Math.min(res, temp.val - pre.val);\r\n                pre = temp;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"501\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570",children:"501.\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/find-mode-in-binary-search-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u6709\u76f8\u540c\u503c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\uff0c\u627e\u51fa BST \u4e2d\u7684\u6240\u6709\u4f17\u6570\uff08\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u5143\u7d20\uff09\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public int[] findMode(TreeNode root) {\r\n        Map<Integer, Integer> map = new HashMap<>();\r\n        List<Integer> list = new ArrayList<>();\r\n        if(root == null) return list.stream().mapToInt(Integer::intValue).toArray();;\r\n\r\n        searchBST(root, map);\r\n        List<Map.Entry<Integer, Integer>> maplist = map.entrySet().stream()\r\n            .sorted((c1, c2) -> c2.getValue().compareTo(c1.getValue()))\r\n            .collect(Collectors.toList());\r\n        list.add(maplist.get(0).getKey());\r\n        for(int i = 1; i < maplist.size(); i++){\r\n            if(maplist.get(i).getValue() == maplist.get(i - 1).getValue()){\r\n                list.add(maplist.get(i).getKey());\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return list.stream().mapToInt(Integer::intValue).toArray();\r\n    }\r\n    private void searchBST(TreeNode node, Map<Integer, Integer> map){\r\n        if(node == null) return;\r\n        TreeNode cur = node;\r\n        map.put(cur.val, map.getOrDefault(cur.val, 0) + 1);\r\n        searchBST(cur.left, map);\r\n        searchBST(cur.right, map);\r\n    }\r\n}\r\n//\u4f18\u5316\r\nclass Solution {\r\n    int count;\r\n    int max_count;\r\n    TreeNode pre;\r\n    List<Integer> resList = new ArrayList<>();\r\n    public int[] findMode(TreeNode root) {\r\n        count = 0;\r\n        max_count = 0;\r\n        findMode1(root);\r\n        int[] res = new int[resList.size()];\r\n        for(int i = 0; i < resList.size(); i++){\r\n            res[i] = resList.get(i);\r\n        }\r\n        return res;\r\n    }\r\n    private void findMode1(TreeNode node){\r\n        if(node == null) return;\r\n        findMode1(node.left);\r\n\r\n        if(pre == null || node.val == pre.val){\r\n            count++;\r\n        } else {\r\n            count = 1;\r\n        }\r\n        if(count > max_count){\r\n            resList.clear();\r\n            max_count = count;\r\n            resList.add(node.val);\r\n        } else if(count == max_count) {\r\n            resList.add(node.val);\r\n        }\r\n\r\n        pre = node;\r\n        findMode1(node.right);\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",children:"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u767e\u5ea6\u767e\u79d1\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a\u201c\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\uff09\u3002\u201d"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f52\uff0c\u7ec8\u6b62\u6761\u4ef6\u662f\u627e\u5230p\u6216\u8005q\r\nclass Solution {\r\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\r\n        if(root == null || root == q || root == p) return root;\r\n        TreeNode res = root;\r\n        TreeNode left = lowestCommonAncestor(root.left, p, q);\r\n        TreeNode right = lowestCommonAncestor(root.right, p, q);\r\n        if(left == null){\r\n            return right;\r\n        } else if(right == null){\r\n            return left;\r\n        } else {\r\n            return root;\r\n        }\r\n\r\n    }\r\n}\r\n//\u8fed\u4ee3\r\nclass Solution {\r\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\r\n        if(root == null || root == q || root == p) return root;\r\n        int max = Integer.MAX_VALUE;\r\n        Deque<TreeNode> deque = new LinkedList<>();\r\n        TreeNode cur = root, pre = null;\r\n        while(cur != null || !deque.isEmpty()){\r\n            while(cur != null){\r\n                deque.push(cur);\r\n                cur = cur.left;\r\n            }// \u5b50\u6811\u7684\u6700\u5de6\u8fb9\u7684\u8282\u70b9\r\n            cur = deque.pop();\r\n            if(cur.right == null || cur.right == pre){\r\n                if(cur == p || cur == q){\r\n                    if((cur.left != null && cur.left.val == max) || (cur.right != null && cur.right.val == max)) return cur;\r\n                    cur.val = max;\r\n                }\r\n\r\n                // p/q\u662f \u5de6/\u53f3 , \u8fd4\u56de\u4e2d\r\n                if(cur.left != null && cur.left.val == max && cur.right != null && cur.right.val == max) return cur;\r\n\r\n                // MAX_VALUE \u5f80\u4e0a\u4f20\u9012\r\n                if((cur.left != null && cur.left.val == max) || (cur.right != null && cur.right.val == max)) cur.val = max;\r\n                pre = cur;\r\n                cur = null;\r\n            }\r\n            else{//\u5b58\u5728\u53f3\u4e8c\u53c9\u6811\u6ca1\u6709\u904d\u5386\r\n                deque.push(cur);\r\n                cur = cur.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"235-\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",children:"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u767e\u5ea6\u767e\u79d1\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a\u201c\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148\uff09\u3002\u201d"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f52\r\nclass Solution {\r\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\r\n        if(root == null || root == q || root == p) return root;\r\n\r\n        if(p.val > root.val && q.val > root.val){\r\n            return lowestCommonAncestor(root.right, p, q);\r\n        } else if(p.val < root.val && q.val < root.val){\r\n            return lowestCommonAncestor(root.left, p, q);\r\n        } else {\r\n            return root;\r\n        }\r\n\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"701\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c",children:"701.\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/insert-into-a-binary-search-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\u7684\u6839\u8282\u70b9\u548c\u8981\u63d2\u5165\u6811\u4e2d\u7684\u503c\uff0c\u5c06\u503c\u63d2\u5165\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u8fd4\u56de\u63d2\u5165\u540e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u3002 \u8f93\u5165\u6570\u636e\u4fdd\u8bc1\uff0c\u65b0\u503c\u548c\u539f\u59cb\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4efb\u610f\u8282\u70b9\u503c\u90fd\u4e0d\u540c\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u6ce8\u610f\uff0c\u53ef\u80fd\u5b58\u5728\u591a\u79cd\u6709\u6548\u7684\u63d2\u5165\u65b9\u5f0f\uff0c\u53ea\u8981\u6811\u5728\u63d2\u5165\u540e\u4ecd\u4fdd\u6301\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u8fd4\u56de\u4efb\u610f\u6709\u6548\u7684\u7ed3\u679c\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public TreeNode insertIntoBST(TreeNode root, int val) {\r\n        if(root == null || root.val == val) return new TreeNode(val);\r\n        if(root.val > val) root.left = insertIntoBST(root.left, val);\r\n        else root.right = insertIntoBST(root.right, val);\r\n        return root;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"450\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9",children:"450.\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/delete-node-in-a-bst/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 root \u548c\u4e00\u4e2a\u503c key\uff0c\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684 key \u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5e76\u4fdd\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u4e0d\u53d8\u3002\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u6709\u53ef\u80fd\u88ab\u66f4\u65b0\uff09\u7684\u6839\u8282\u70b9\u7684\u5f15\u7528\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public TreeNode deleteNode(TreeNode root, int key) {\r\n        if(root == null) return root;\r\n        if(root.val == key){\r\n            TreeNode left = root.left;\r\n            if(root.right != null){\r\n                TreeNode right = root.right;\r\n                root = root.right;\r\n                while(root.left != null) root = root.left;\r\n                root.left = left;\r\n                left = right;\r\n            }\r\n            return left;\r\n        }\r\n        if(root.val > key) root.left = deleteNode(root.left, key);\r\n        if(root.val < key) root.right = deleteNode(root.right, key);\r\n        return root;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"669-\u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811",children:"669. \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/trim-a-binary-search-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u540c\u65f6\u7ed9\u5b9a\u6700\u5c0f\u8fb9\u754c L \u548c\u6700\u5927\u8fb9\u754c R\u3002\u901a\u8fc7\u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u7684\u503c\u5728[L, R]\u4e2d (R>=L) \u3002\u4f60\u53ef\u80fd\u9700\u8981\u6539\u53d8\u6811\u7684\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u7ed3\u679c\u5e94\u5f53\u8fd4\u56de\u4fee\u526a\u597d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b0\u7684\u6839\u8282\u70b9\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public TreeNode trimBST(TreeNode root, int low, int high) {\r\n        if(root == null) return null;\r\n        root.left = trimBST(root.left, low, high);\r\n        root.right = trimBST(root.right, low, high);\r\n\r\n        if(root.val < low) root = root.right;\r\n        else if(root.val > high) root = root.left;\r\n\r\n\r\n        return root;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"108\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811",children:"108.\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u5c06\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u8f6c\u6362\u4e3a\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public TreeNode sortedArrayToBST(int[] nums) {\r\n        TreeNode root = traversal(nums, 0, nums.length-1);\r\n        return root;\r\n    }\r\n    private TreeNode traversal(int[] nums, int left, int right){\r\n        if(left > right) return null;\r\n        int mid1 = (right + left) / 2;\r\n        TreeNode node = new TreeNode(nums[mid1]);\r\n        node.left = traversal(nums, left, mid1-1);\r\n        node.right = traversal(nums, mid1+1, right);\r\n        return node;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"538\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811",children:"538.\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/convert-bst-to-greater-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u51fa\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\uff0c\u8be5\u6811\u7684\u8282\u70b9\u503c\u5404\u4e0d\u76f8\u540c\uff0c\u8bf7\u4f60\u5c06\u5176\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811\uff08Greater Sum Tree\uff09\uff0c\u4f7f\u6bcf\u4e2a\u8282\u70b9 node \u7684\u65b0\u503c\u7b49\u4e8e\u539f\u6811\u4e2d\u5927\u4e8e\u6216\u7b49\u4e8e node.val \u7684\u503c\u4e4b\u548c\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"//\u9012\u5f521\r\nclass Solution {\r\n    public TreeNode convertBST(TreeNode root) {\r\n        if(root == null) return null;\r\n        root.right = convertBST(root.right);\r\n\r\n        TreeNode node = root.right;\r\n        if(node != null){\r\n            while(node.left != null) node = node.left;\r\n            root.val += node.val;\r\n        }\r\n\r\n        node = root.left;\r\n        if(node != null){\r\n            while(node.right != null) node = node.right;\r\n            node.val += root.val;\r\n        }\r\n        root.left = convertBST(root.left);\r\n        return root;\r\n    }\r\n}\r\n\r\n//\u9012\u5f522\r\nclass Solution {\r\n    int sum;\r\n    public TreeNode convertBST(TreeNode root) {\r\n        sum = 0;\r\n        convertBST1(root);\r\n        return root;\r\n    }\r\n    private void convertBST1(TreeNode node){\r\n        if(node == null) return;\r\n        convertBST1(node.right);\r\n        node.val += sum;\r\n        sum = node.val;\r\n        convertBST1(node.left);\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h2,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,l.jsx)(r.p,{children:"\u4e8c\u53c9\u6811\u5206\u7c7b\uff1a"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"\u6d89\u53ca\u5230\u4e8c\u53c9\u6811\u7684\u6784\u9020\uff0c\u65e0\u8bba\u666e\u901a\u4e8c\u53c9\u6811\u8fd8\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u4e00\u5b9a\u524d\u5e8f\uff0c\u90fd\u662f\u5148\u6784\u9020\u4e2d\u8282\u70b9\u3002"}),"\n",(0,l.jsx)(r.li,{children:"\u6c42\u666e\u901a\u4e8c\u53c9\u6811\u7684\u5c5e\u6027\uff0c\u4e00\u822c\u662f\u540e\u5e8f\uff0c\u4e00\u822c\u8981\u901a\u8fc7\u9012\u5f52\u51fd\u6570\u7684\u8fd4\u56de\u503c\u505a\u8ba1\u7b97\u3002"}),"\n",(0,l.jsx)(r.li,{children:"\u6c42\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5c5e\u6027\uff0c\u4e00\u5b9a\u662f\u4e2d\u5e8f\u4e86\uff0c\u8981\u4e0d\u767d\u778e\u4e86\u6709\u5e8f\u6027\u4e86\u3002"}),"\n"]}),"\n",(0,l.jsxs)(r.p,{children:["\u6ce8\u610f\u5728\u666e\u901a\u4e8c\u53c9\u6811\u7684\u5c5e\u6027\u4e2d\uff0c\u4e00\u822c\u4e3a\u540e\u5e8f\uff0c\u4f8b\u5982\u5355\u7eaf\u6c42\u6df1\u5ea6\u5c31\u7528\u524d\u5e8f\uff0c",(0,l.jsx)(r.a,{href:"https://programmercarl.com/0257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.html",children:"\u4e8c\u53c9\u6811\uff1a\u627e\u6240\u6709\u8def\u5f84 "}),"\u4e5f\u7528\u4e86\u524d\u5e8f\uff0c\u8fd9\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba9\u7236\u8282\u70b9\u6307\u5411\u5b50\u8282\u70b9\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u6240\u4ee5\u6c42\u666e\u901a\u4e8c\u53c9\u6811\u7684\u5c5e\u6027\u8fd8\u662f\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u4e8c\u53c9\u6811\u4e13\u9898\u6c47\u805a\u4e3a\u4e00\u5f20\u56fe\uff1a"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.img,{alt:"img",src:n(3902).A+"",width:"1660",height:"1050"})}),"\n",(0,l.jsx)(r.h2,{id:"\u5176\u4ed6",children:"\u5176\u4ed6"}),"\n",(0,l.jsx)(r.h3,{id:"129-\u6c42\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u6570\u5b57\u4e4b\u548c",children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/sum-root-to-leaf-numbers/",children:"129. \u6c42\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u6570\u5b57\u4e4b\u548c"})}),"\n",(0,l.jsxs)(r.p,{children:["\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 ",(0,l.jsx)(r.code,{children:"root"})," \uff0c\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u5b58\u653e\u6709\u4e00\u4e2a ",(0,l.jsx)(r.code,{children:"0"})," \u5230 ",(0,l.jsx)(r.code,{children:"9"})," \u4e4b\u95f4\u7684\u6570\u5b57\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u6bcf\u6761\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\uff1a"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["\u4f8b\u5982\uff0c\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u7684\u8def\u5f84 ",(0,l.jsx)(r.code,{children:"1 -> 2 -> 3"})," \u8868\u793a\u6570\u5b57 ",(0,l.jsx)(r.code,{children:"123"})," \u3002"]}),"\n"]}),"\n",(0,l.jsxs)(r.p,{children:["\u8ba1\u7b97\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u751f\u6210\u7684 ",(0,l.jsx)(r.strong,{children:"\u6240\u6709\u6570\u5b57\u4e4b\u548c"})," \u3002"]}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"\u53f6\u8282\u70b9"})," \u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"class Solution {\r\n    public int sumNumbers(TreeNode root) {\r\n        return dfs(root, 0);\r\n    }\r\n\r\n    private int dfs(TreeNode node, int sum){\r\n        if(node == null) return 0;\r\n        int cur = node.val + sum * 10;\r\n\r\n        if(node.left == null && node.right == null) return cur;\r\n\r\n        int left = dfs(node.left, cur);\r\n        int right = dfs(node.right, cur);\r\n        return left + right;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"1382\u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861",children:"1382.\u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/balance-a-binary-search-tree/",children:"\u529b\u6263\u9898\u76ee\u94fe\u63a5"})}),"\n",(0,l.jsx)(r.p,{children:"\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u68f5 \u5e73\u8861\u540e \u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u65b0\u751f\u6210\u7684\u6811\u5e94\u8be5\u4e0e\u539f\u6765\u7684\u6811\u6709\u7740\u76f8\u540c\u7684\u8282\u70b9\u503c\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e24\u68f5\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1 \uff0c\u6211\u4eec\u5c31\u79f0\u8fd9\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u662f \u5e73\u8861\u7684 \u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u5982\u679c\u6709\u591a\u79cd\u6784\u9020\u65b9\u6cd5\uff0c\u8bf7\u4f60\u8fd4\u56de\u4efb\u610f\u4e00\u79cd\u3002"}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54\uff1a"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"import java.util.*;\r\n\r\nclass Solution {\r\n    List<Integer> list = new ArrayList<>();\r\n\r\n    public TreeNode balanceBST(TreeNode root) {\r\n        if(root == null) return  root;\r\n        inorder(root);\r\n\r\n        return getTree(root, 0, list.size() - 1);\r\n    }\r\n\r\n    private void inorder(TreeNode node) { // \u5bf9\u4e8c\u53c9\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\r\n        if (node == null) return;\r\n        inorder(node.left);\r\n        list.add(node.val);\r\n        inorder(node.right);\r\n    }\r\n\r\n    private TreeNode getTree(TreeNode root, int left, int right){  // \u6839\u636e\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\u91cd\u5efa\u4e8c\u53c9\u6811\r\n        if(left > right) return null;\r\n        int mid = (left + right) / 2;\r\n        TreeNode node = new TreeNode(list.get(mid));\r\n        node.left = getTree(root, left, mid - 1);\r\n        node.right = getTree(root, mid + 1, right);\r\n        return node;\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"543-\u4e8c\u53c9\u6811\u7684\u76f4\u5f84",children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/diameter-of-binary-tree/",children:"543. \u4e8c\u53c9\u6811\u7684\u76f4\u5f84"})}),"\n",(0,l.jsxs)(r.p,{children:["\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\uff0c\u8fd4\u56de\u8be5\u6811\u7684 ",(0,l.jsx)(r.strong,{children:"\u76f4\u5f84"})," \u3002"]}),"\n",(0,l.jsxs)(r.p,{children:["\u4e8c\u53c9\u6811\u7684 ",(0,l.jsx)(r.strong,{children:"\u76f4\u5f84"})," \u662f\u6307\u6811\u4e2d\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6700\u957f\u8def\u5f84\u7684 ",(0,l.jsx)(r.strong,{children:"\u957f\u5ea6"})," \u3002\u8fd9\u6761\u8def\u5f84\u53ef\u80fd\u7ecf\u8fc7\u4e5f\u53ef\u80fd\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9 ",(0,l.jsx)(r.code,{children:"root"})," \u3002"]}),"\n",(0,l.jsxs)(r.p,{children:["\u4e24\u8282\u70b9\u4e4b\u95f4\u8def\u5f84\u7684 ",(0,l.jsx)(r.strong,{children:"\u957f\u5ea6"})," \u7531\u5b83\u4eec\u4e4b\u95f4\u8fb9\u6570\u8868\u793a\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass Solution(object):\r\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\r\n        """\r\n        :type root: Optional[TreeNode]\r\n        :rtype: int\r\n        """\r\n        if root is None:\r\n            return 0\r\n        res = 0\r\n        def dfs(node: Optional[TreeNode]) -> int: # \u8fd4\u56de\u6700\u5927\u6df1\u5ea6\r\n            if node is None:\r\n                return -1\r\n            left = dfs(node.left) + 1\r\n            right = dfs(node.right) + 1\r\n            nonlocal res # \u58f0\u660e res \u4e3a\u975e\u5c40\u90e8\u53d8\u91cf\r\n            res = max(res, left+right)\r\n            return max(left, right)\r\n\r\n        dfs(root)\r\n        return res\n'})}),"\n",(0,l.jsx)(r.h3,{id:"230-\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c-k-\u5c0f\u7684\u5143\u7d20",children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/kth-smallest-element-in-a-bst/",children:"230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c K \u5c0f\u7684\u5143\u7d20"})}),"\n",(0,l.jsxs)(r.p,{children:["\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 ",(0,l.jsx)(r.code,{children:"root"})," \uff0c\u548c\u4e00\u4e2a\u6574\u6570 ",(0,l.jsx)(r.code,{children:"k"})," \uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u67e5\u627e\u5176\u4e2d\u7b2c ",(0,l.jsx)(r.code,{children:"k"})," \u5c0f\u7684\u5143\u7d20\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u6570\uff09\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54:"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"\u4e2d\u5e8f\u904d\u5386"}),":\u65f6\u95f4\u590d\u6742\u5ea6:",(0,l.jsx)(r.span,{className:"katex",children:(0,l.jsx)(r.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,l.jsx)(r.span,{className:"mopen",children:"("}),(0,l.jsx)(r.span,{className:"mord mathnormal",children:"n"}),(0,l.jsx)(r.span,{className:"mclose",children:")"})]})})})]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"# Definition for a binary tree node.\r\nclass TreeNode:\r\n    def __init__(self, val=0, left=None, right=None):\r\n        self.val = val\r\n        self.left = left\r\n        self.right = right\r\nclass Solution:\r\n    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:\r\n        res = 0\r\n        def dfs(root: Optional[TreeNode]) -> None:\r\n            nonlocal res, k\r\n            if root is None or k == 0:\r\n                return\r\n\r\n            dfs(root.left)\r\n            k -= 1\r\n            if k == 0:\r\n                res = root.val\r\n            dfs(root.right)\r\n        dfs(root)\r\n        return res\n"})}),"\n",(0,l.jsxs)(r.p,{children:["\u6211\u7684\u601d\u8def:\u65f6\u95f4\u590d\u6742\u5ea6",(0,l.jsx)(r.span,{className:"katex",children:(0,l.jsx)(r.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,l.jsx)(r.span,{className:"mopen",children:"("}),(0,l.jsx)(r.span,{className:"mord mathnormal",children:"n"}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsxs)(r.span,{className:"mop",children:["lo",(0,l.jsx)(r.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,l.jsx)(r.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,l.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,l.jsx)(r.span,{className:"mclose",children:")"})]})})})]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-java",children:"public class TreeNode {\r\n    int val;\r\n    TreeNode left;\r\n    TreeNode right;\r\n    TreeNode() {}\r\n    TreeNode(int val) { this.val = val; }\r\n    TreeNode(int val, TreeNode left, TreeNode right) {\r\n        this.val = val;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nclass Solution {\r\n    Queue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);\r\n    public int kthSmallest(TreeNode root, int k) {\r\n        if(pq.size() < k){\r\n            pq.offer(root.val);\r\n        } else if(pq.peek() > root.val){\r\n            pq.poll();\r\n            pq.offer(root.val);\r\n        }\r\n        if(root.left != null){\r\n            kthSmallest(root.left,k);\r\n        }\r\n        if(root.right != null){\r\n            kthSmallest(root.right,k);\r\n        }\r\n        return pq.peek();\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(r.h3,{id:"114-\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868",children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/",children:"114. \u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868"})}),"\n",(0,l.jsxs)(r.p,{children:["\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 ",(0,l.jsx)(r.code,{children:"root"})," \uff0c\u8bf7\u4f60\u5c06\u5b83\u5c55\u5f00\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\uff1a"]}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["\u5c55\u5f00\u540e\u7684\u5355\u94fe\u8868\u5e94\u8be5\u540c\u6837\u4f7f\u7528 ",(0,l.jsx)(r.code,{children:"TreeNode"})," \uff0c\u5176\u4e2d ",(0,l.jsx)(r.code,{children:"right"})," \u5b50\u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u800c\u5de6\u5b50\u6307\u9488\u59cb\u7ec8\u4e3a ",(0,l.jsx)(r.code,{children:"null"})]}),"\n",(0,l.jsxs)(r.li,{children:["\u5c55\u5f00\u540e\u7684\u5355\u94fe\u8868\u5e94\u8be5\u4e0e\u4e8c\u53c9\u6811 ",(0,l.jsx)(r.a,{href:"https://baike.baidu.com/item/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/6442839?fr=aladdin",children:(0,l.jsx)(r.strong,{children:"\u5148\u5e8f\u904d\u5386"})})," \u987a\u5e8f\u76f8\u540c"]}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54:"}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"MyCode"}),":"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'# Definition for a binary tree node.\r\nclass TreeNode:\r\n    def __init__(self, val=0, left=None, right=None):\r\n        self.val = val\r\n        self.left = left\r\n        self.right = right\r\nclass Solution:\r\n    def findRight(self, root: Optional[TreeNode]) -> TreeNode:\r\n        if root is None or root.right is None:\r\n            return root\r\n        return self.findRight(root.right)\r\n    def flatten(self, root: Optional[TreeNode]) -> None:\r\n        """\r\n        Do not return anything, modify root in-place instead.\r\n        """\r\n        if root is None or (root.left is None and root.right is None):\r\n            return root\r\n        \r\n        def dfs(root: Optional[TreeNode]) -> None:\r\n            if root is None:\r\n                return None\r\n            dfs(root.right)\r\n            dfs(root.left)\r\n            if root.left:\r\n                temp = root.right\r\n                root.right = root.left\r\n                root.left = None\r\n                self.findRight(root).right = temp\r\n\r\n        dfs(root)\n'})}),"\n",(0,l.jsxs)(r.p,{children:["\u4e0a\u8ff0\u7684\u7b80\u5316(",(0,l.jsx)(r.strong,{children:"\u5206\u6cbb"}),")\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,l.jsx)(r.span,{className:"katex",children:(0,l.jsx)(r.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,l.jsx)(r.span,{className:"mopen",children:"("}),(0,l.jsx)(r.span,{className:"mord mathnormal",children:"n"}),(0,l.jsx)(r.span,{className:"mclose",children:")"})]})})})]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'# Definition for a binary tree node.\r\nclass TreeNode:\r\n    def __init__(self, val=0, left=None, right=None):\r\n        self.val = val\r\n        self.left = left\r\n        self.right = right\r\nclass Solution:\r\n    def flatten(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\r\n        """\r\n        Do not return anything, modify root in-place instead.\r\n        """        \r\n        if root is None:\r\n            return None\r\n        left_tail = self.flatten(root.left)\r\n        right_tail = self.flatten(root.right)\r\n\r\n        if left_tail:\r\n            left_tail.right = root.right\r\n            root.right = root.left\r\n            root.left = None\r\n        return right_tail or left_tail or root\r\n\n'})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"\u5934\u63d2\u6cd5"}),"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,l.jsx)(r.span,{className:"katex",children:(0,l.jsx)(r.span,{className:"katex-html","aria-hidden":"true",children:(0,l.jsxs)(r.span,{className:"base",children:[(0,l.jsx)(r.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,l.jsx)(r.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,l.jsx)(r.span,{className:"mopen",children:"("}),(0,l.jsx)(r.span,{className:"mord mathnormal",children:"n"}),(0,l.jsx)(r.span,{className:"mclose",children:")"})]})})})]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:'# Definition for a binary tree node.\r\nclass TreeNode:\r\n    def __init__(self, val=0, left=None, right=None):\r\n        self.val = val\r\n        self.left = left\r\n        self.right = right\r\nclass Solution:\r\n    head = None # \u5f53\u524d\u5934\u8282\u70b9\r\n    def flatten(self, root: Optional[TreeNode]) -> None:\r\n        """\r\n        Do not return anything, modify root in-place instead.\r\n        """        \r\n        if root is None:\r\n            return None\r\n        self.flatten(root.right)\r\n        self.flatten(root.left)\r\n        \r\n        root.left = None\r\n        root.right = self.head # \u5c06\u5f53\u524d\u8282\u70b9\u653e\u5230\u5934\u8282\u70b9\u4e4b\u4e0a\r\n        self.head = root # \u66f4\u65b0\u5934\u8282\u70b9\n'})}),"\n",(0,l.jsx)(r.h3,{id:"437-\u8def\u5f84\u603b\u548c-iii",children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/path-sum-iii/",children:"437. \u8def\u5f84\u603b\u548c III"})}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54:"}),"\n",(0,l.jsxs)(r.p,{children:["\u7279\u6b8a\u60c5\u51b5:",(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/subarray-sum-equals-k/",children:"560. \u548c\u4e3a K \u7684\u5b50\u6570\u7ec4"})]}),"\n",(0,l.jsxs)(r.p,{children:["\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 ",(0,l.jsx)(r.code,{children:"root"})," \uff0c\u548c\u4e00\u4e2a\u6574\u6570 ",(0,l.jsx)(r.code,{children:"targetSum"})," \uff0c\u6c42\u8be5\u4e8c\u53c9\u6811\u91cc\u8282\u70b9\u503c\u4e4b\u548c\u7b49\u4e8e ",(0,l.jsx)(r.code,{children:"targetSum"})," \u7684 ",(0,l.jsx)(r.strong,{children:"\u8def\u5f84"})," \u7684\u6570\u76ee\u3002"]}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"\u8def\u5f84"})," \u4e0d\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e5f\u4e0d\u9700\u8981\u5728\u53f6\u5b50\u8282\u70b9\u7ed3\u675f\uff0c\u4f46\u662f\u8def\u5f84\u65b9\u5411\u5fc5\u987b\u662f\u5411\u4e0b\u7684\uff08\u53ea\u80fd\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\uff09\u3002"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass Solution:\r\n    targetSum1 = 0\r\n    cnt = 0\r\n    def dfs(self, node: Optional[TreeNode], pre_sum: defaultdict, sum: int) -> None:\r\n        if node is None:\r\n            return\r\n        sum += node.val\r\n        \r\n        self.cnt += pre_sum[sum-self.targetSum1] # \u628a node \u5f53\u4f5c\u8def\u5f84\u7684\u7ec8\u70b9\uff0c\u7edf\u8ba1\u6709\u591a\u5c11\u4e2a\u8d77\u70b9\r\n        pre_sum[sum] += 1\r\n        self.dfs(node.left, pre_sum, sum)\r\n        self.dfs(node.right, pre_sum, sum)\r\n        pre_sum[sum] -= 1 # \u6062\u590d\u73b0\u573a\r\n\r\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\r\n        pre_sum = defaultdict(int)\r\n        pre_sum[0] = 1\r\n        self.targetSum1 = targetSum\r\n        self.dfs(root, pre_sum, 0)\r\n        \r\n        return self.cnt\n"})}),"\n",(0,l.jsx)(r.h3,{id:"124-\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c",children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/binary-tree-maximum-path-sum/",children:"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c"})}),"\n",(0,l.jsxs)(r.p,{children:["\u4e8c\u53c9\u6811\u4e2d\u7684 ",(0,l.jsx)(r.strong,{children:"\u8def\u5f84"})," \u88ab\u5b9a\u4e49\u4e3a\u4e00\u6761\u8282\u70b9\u5e8f\u5217\uff0c\u5e8f\u5217\u4e2d\u6bcf\u5bf9\u76f8\u90bb\u8282\u70b9\u4e4b\u95f4\u90fd\u5b58\u5728\u4e00\u6761\u8fb9\u3002\u540c\u4e00\u4e2a\u8282\u70b9\u5728\u4e00\u6761\u8def\u5f84\u5e8f\u5217\u4e2d ",(0,l.jsx)(r.strong,{children:"\u81f3\u591a\u51fa\u73b0\u4e00\u6b21"})," \u3002\u8be5\u8def\u5f84 ",(0,l.jsx)(r.strong,{children:"\u81f3\u5c11\u5305\u542b\u4e00\u4e2a"})," \u8282\u70b9\uff0c\u4e14\u4e0d\u4e00\u5b9a\u7ecf\u8fc7\u6839\u8282\u70b9\u3002"]}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:"\u8def\u5f84\u548c"})," \u662f\u8def\u5f84\u4e2d\u5404\u8282\u70b9\u503c\u7684\u603b\u548c\u3002"]}),"\n",(0,l.jsxs)(r.p,{children:["\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 ",(0,l.jsx)(r.code,{children:"root"})," \uff0c\u8fd4\u56de\u5176 ",(0,l.jsx)(r.strong,{children:"\u6700\u5927\u8def\u5f84\u548c"})," \u3002"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, val=0, left=None, right=None):\r\n#         self.val = val\r\n#         self.left = left\r\n#         self.right = right\r\nclass Solution:\r\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\r\n        res = -inf\r\n\r\n        def dfs(node: Optional[TreeNode]) -> int:\r\n            if node is None:\r\n                return 0\r\n            max_left = dfs(node.left)\r\n            max_right = dfs(node.right)\r\n            nonlocal res\r\n            \r\n            res = max(res, max_left+max_right+node.val) \r\n            return max(max(max_left, max_right) + node.val, 0) #\u82e5\u8be5\u8282\u70b9\u4e0b\u7684\u8def\u5f84\u548c\u5c0f\u4e8e\u96f6,\u5219\u653e\u5f03\u8be5\u8282\u70b9;\u5927\u4e8e\u96f6\u5219\u8fd4\u56de\u6700\u5927\u8def\u5f84,\u8fd9\u6837\u4fdd\u8bc1\u4e86dfs\u8fd4\u56de\u503c\u5927\u4e8e\u96f6\r\n\r\n        dfs(root)\r\n        return res\n"})}),"\n",(0,l.jsx)(r.h3,{id:"208-\u5b9e\u73b0-trie-\u524d\u7f00\u6811",children:(0,l.jsx)(r.a,{href:"https://leetcode.cn/problems/implement-trie-prefix-tree/",children:"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)"})}),"\n",(0,l.jsxs)(r.p,{children:[(0,l.jsx)(r.strong,{children:(0,l.jsx)(r.a,{href:"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin",children:"Trie"})}),'\uff08\u53d1\u97f3\u7c7b\u4f3c "try"\uff09\u6216\u8005\u8bf4 ',(0,l.jsx)(r.strong,{children:"\u524d\u7f00\u6811"})," \u662f\u4e00\u79cd\u6811\u5f62\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u9ad8\u6548\u5730\u5b58\u50a8\u548c\u68c0\u7d22\u5b57\u7b26\u4e32\u6570\u636e\u96c6\u4e2d\u7684\u952e\u3002\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u6709\u76f8\u5f53\u591a\u7684\u5e94\u7528\u60c5\u666f\uff0c\u4f8b\u5982\u81ea\u52a8\u8865\u5168\u548c\u62fc\u5199\u68c0\u67e5\u3002"]}),"\n",(0,l.jsx)(r.p,{children:"\u8bf7\u4f60\u5b9e\u73b0 Trie \u7c7b\uff1a"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.code,{children:"Trie()"})," \u521d\u59cb\u5316\u524d\u7f00\u6811\u5bf9\u8c61\u3002"]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.code,{children:"void insert(String word)"})," \u5411\u524d\u7f00\u6811\u4e2d\u63d2\u5165\u5b57\u7b26\u4e32 ",(0,l.jsx)(r.code,{children:"word"})," \u3002"]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.code,{children:"boolean search(String word)"})," \u5982\u679c\u5b57\u7b26\u4e32 ",(0,l.jsx)(r.code,{children:"word"})," \u5728\u524d\u7f00\u6811\u4e2d\uff0c\u8fd4\u56de ",(0,l.jsx)(r.code,{children:"true"}),"\uff08\u5373\uff0c\u5728\u68c0\u7d22\u4e4b\u524d\u5df2\u7ecf\u63d2\u5165\uff09\uff1b\u5426\u5219\uff0c\u8fd4\u56de ",(0,l.jsx)(r.code,{children:"false"})," \u3002"]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.code,{children:"boolean startsWith(String prefix)"})," \u5982\u679c\u4e4b\u524d\u5df2\u7ecf\u63d2\u5165\u7684\u5b57\u7b26\u4e32 ",(0,l.jsx)(r.code,{children:"word"})," \u7684\u524d\u7f00\u4e4b\u4e00\u4e3a ",(0,l.jsx)(r.code,{children:"prefix"})," \uff0c\u8fd4\u56de ",(0,l.jsx)(r.code,{children:"true"})," \uff1b\u5426\u5219\uff0c\u8fd4\u56de ",(0,l.jsx)(r.code,{children:"false"})," \u3002"]}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:"\u89e3\u7b54:"}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.strong,{children:"\u4e8c\u53c9\u6811\u53d8\u621026\u53c9\u6811"})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-python",children:"class Node:\r\n    __slots__ = 'son', 'end'\r\n\r\n    def __init__(self) -> None:\r\n        self.son = {}\r\n        self.end = None\r\n        \r\nclass Trie:\r\n\r\n    def __init__(self):\r\n        self.root = Node()\r\n        \r\n\r\n    def insert(self, word: str) -> None:\r\n        cur = self.root\r\n        for c in word:\r\n            if c not in cur.son:\r\n                cur.son[c] = Node() # \u65e0\u8def\u53ef\u8d70\u5c31\u9020\u9646\r\n            cur = cur.son[c]\r\n        cur.end = True\r\n\r\n    def find(self, word: str) -> int:\r\n        cur = self.root\r\n        for c in word:\r\n            if c in cur.son:\r\n                cur = cur.son[c]\r\n            else: # \u9053\u4e0d\u540c\uff0c\u4e0d\u76f8\u4e3a\u8c0b\r\n                return 0\r\n        return 1 if cur.end else 2 # \u7ec8\u70b9\u4e0d\u540c\r\n\r\n    def search(self, word: str) -> bool:\r\n        return self.find(word) == 1\r\n        \r\n\r\n    def startsWith(self, prefix: str) -> bool:\r\n        return self.find(word=prefix) != 0\n"})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},11397:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/20200806190304693-37675117f4f6bb0f01f063b55540fa90.png"},47147:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/20200806190511967-0f5aa5d9e9971a1240b36aff425d89fc.png"},48182:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/20200806191109896-be09dce90c3db995b4c63f5f69f0144b.png"},98414:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/2020092019554618-5f96dbb8ed937dcba95955623f54a412.png"},67633:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/20200920200429452-8843273ac6225b830fdb836bf1e37580.png"},82613:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/20200920221638903-0fbe84ba1c5aaf8875d0a7a667ce8a00.png"},3902:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/21412-d0cfea8662fd39d30226dc4b6de74236.png"},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var t=n(96540);const l={},s=t.createContext(l);function i(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);